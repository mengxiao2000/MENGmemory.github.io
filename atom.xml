<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黎明已经不远</title>
  
  <subtitle>洗洗睡吧</subtitle>
  <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/atom.xml" rel="self"/>
  
  <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/"/>
  <updated>2021-01-12T15:35:24.620Z</updated>
  <id>http://mengxiao2000.github.io/mengxiao2000.github.io/</id>
  
  <author>
    <name>Syiao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络中的市场与策略性互动</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2021/01/12/market-strategy/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2021/01/12/market-strategy/</id>
    <published>2021-01-12T14:39:30.000Z</published>
    <updated>2021-01-12T15:35:24.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络中的市场与策略性互动"><a href="#网络中的市场与策略性互动" class="headerlink" title="网络中的市场与策略性互动"></a>网络中的市场与策略性互动</h1><p>这本书看完快一个月了，是今年接触到的讲解最细致的一本书，案例结合的都非常好。最近换了电脑，也没时间整理，试试迁移完能不能发出去———————————————</p><h2 id="匹配市场"><a href="#匹配市场" class="headerlink" title="匹配市场"></a>匹配市场</h2><h3 id="二部图与完美匹配"><a href="#二部图与完美匹配" class="headerlink" title="二部图与完美匹配"></a>二部图与完美匹配</h3><ul><li>二部图</li><li><p>完美匹配</p><ul><li>每个节点都有边连接到另外一列的节点</li><li>不会出现左边两个节点同时连接到右边同一个节点上</li></ul></li><li><p>受限组</p><ul><li><p>匹配定理</p><ul><li>无法完美匹配的二部图一定包含受限组</li></ul></li></ul></li></ul><h3 id="估值与最优匹配"><a href="#估值与最优匹配" class="headerlink" title="估值与最优匹配"></a>估值与最优匹配</h3><ul><li>每个人得到的对象的估值总和</li></ul><h3 id="价格与市场清仓性质"><a href="#价格与市场清仓性质" class="headerlink" title="价格与市场清仓性质"></a>价格与市场清仓性质</h3><ul><li><p>价格与回报</p><ul><li>回报=估值-支付的钱</li></ul></li><li><p>市场清仓价格</p><ul><li>使每个商品都有了不同的卖家的一组商品价格</li><li>如果一组价格形成的偏好卖家图有完美匹配那么它就是一组市场清仓价格</li><li><p>市场清仓价格的属性</p><ul><li><p>存在性</p><ul><li>对任何买家估值的组合，总存在一组市场清仓价格</li></ul></li><li><p>最优性</p><ul><li>对于任何一组市场清仓价格，偏好卖家图中的一个完美匹配使估值总和在所有买家与卖家的配对中达到最高</li><li>一组市场清仓价格及其对应的偏好卖家图中的完美匹配，能产生卖家和卖家回报总和的最大可能值</li></ul></li></ul></li></ul></li></ul><h3 id="构造一组清仓价格"><a href="#构造一组清仓价格" class="headerlink" title="构造一组清仓价格"></a>构造一组清仓价格</h3><ul><li>受限卖家的邻居N（S）在每一轮都提高一个单位的出价，直到偏好卖家图出现出现完美匹配</li></ul><h3 id="与单品拍卖的关系"><a href="#与单品拍卖的关系" class="headerlink" title="与单品拍卖的关系"></a>与单品拍卖的关系</h3><ul><li>构造价格为0的“虚构卖家”</li></ul><h3 id="匹配定理的证明"><a href="#匹配定理的证明" class="headerlink" title="匹配定理的证明"></a>匹配定理的证明</h3><ul><li><p>交替与增强通路</p><ul><li><p>交替通路</p><ul><li>匹配与非匹配边交替的通路</li></ul></li><li><p>增强通路</p><ul><li>带有非匹配端点的交替通路为增强同路，因为它对应一种增强匹配的方式</li></ul></li><li><p>对于二部图中一个匹配，如果存在一条其两个端点都是非匹配节点的交替通路，则该匹配可被放大</p></li></ul></li><li><p>搜索增强通路</p><ul><li>交替先宽搜索</li></ul></li><li><p>增强通路与受限组</p></li><li>匹配定理</li><li>完美匹配计算</li></ul><h2 id="中介市场网络模型"><a href="#中介市场网络模型" class="headerlink" title="中介市场网络模型"></a>中介市场网络模型</h2><h3 id="交易网络模型"><a href="#交易网络模型" class="headerlink" title="交易网络模型"></a>交易网络模型</h3><ul><li>卖家-经纪人-买家</li><li>回报</li><li><p>最佳应对和均衡</p><ul><li><p>子博弈完美纳什均衡</p><ul><li>卖方和卖方在经纪人报价后动作</li></ul></li></ul></li></ul><h3 id="交易网络模型中的均衡"><a href="#交易网络模型中的均衡" class="headerlink" title="交易网络模型中的均衡"></a>交易网络模型中的均衡</h3><ul><li><p>垄断</p><ul><li>买方和卖方只有一个经纪人可选择</li></ul></li><li><p>理想竞争</p><ul><li><p>买方和卖方有多个经纪人可选择</p><ul><li>经纪人共同的出价和要价</li></ul></li></ul></li><li><p>隐含的理想竞争</p></li></ul><h3 id="拍卖及波及效应"><a href="#拍卖及波及效应" class="headerlink" title="拍卖及波及效应"></a>拍卖及波及效应</h3><ul><li><p>次价拍卖</p><ul><li>均衡价格和物品流实现了次价拍卖而非依靠规定实现</li></ul></li><li><p>网络中变化的波及效应</p><ul><li>网络结构的局部变化对整体交易的影响</li></ul></li></ul><h3 id="交易网络中的社会福利"><a href="#交易网络中的社会福利" class="headerlink" title="交易网络中的社会福利"></a>交易网络中的社会福利</h3><ul><li>比较丰富连接的网络比稀疏连接的网络具有取得更高社会福利的潜力，前者允许商品充分流动，后者可能阻碍商品流动的瓶颈</li><li>均衡产生极大化社会福利的分配</li></ul><h3 id="经纪人的利润"><a href="#经纪人的利润" class="headerlink" title="经纪人的利润"></a>经纪人的利润</h3><ul><li>经纪人为了得到利润，必须在网络中具有根本性（难以被他人替代）的功能</li><li>从经纪人到另一节点的”基本边“，删除会改变社会最优值，使经纪人可以从均衡中获益</li></ul><h2 id="网络中的议价与权力"><a href="#网络中的议价与权力" class="headerlink" title="网络中的议价与权力"></a>网络中的议价与权力</h2><h3 id="权力的描述"><a href="#权力的描述" class="headerlink" title="权力的描述"></a>权力的描述</h3><ul><li>依赖性</li><li>排他性</li><li>饱和性</li><li>介数</li></ul><h3 id="权力与交换的实验性研究"><a href="#权力与交换的实验性研究" class="headerlink" title="权力与交换的实验性研究"></a>权力与交换的实验性研究</h3><ul><li>网络交换实验</li></ul><h3 id="网络交换实验的结果"><a href="#网络交换实验的结果" class="headerlink" title="网络交换实验的结果"></a>网络交换实验的结果</h3><h3 id="与买卖网络的一种联系"><a href="#与买卖网络的一种联系" class="headerlink" title="与买卖网络的一种联系"></a>与买卖网络的一种联系</h3><h3 id="二人交互模型：纳什议价解"><a href="#二人交互模型：纳什议价解" class="headerlink" title="二人交互模型：纳什议价解"></a>二人交互模型：纳什议价解</h3><ul><li><p>纳什议价解</p><ul><li>当A和B就如何划分￥1进行谈判时，弱A有外部选项x，B有外部选项y，且x+y≤1，则纳什议价解为，对A来说x+1s/2=(x+1-y)/2，对B来说则同理替换。“如何分配剩余s=1-x-y的问题”</li></ul></li></ul><h3 id="二人交互模型：最后通牒"><a href="#二人交互模型：最后通牒" class="headerlink" title="二人交互模型：最后通牒"></a>二人交互模型：最后通牒</h3><ul><li><p>最后通牒博弈</p><ul><li>安排在权力严重失衡条件下的实验对象会系统性的偏离简单理论模型的极端预测结果。</li></ul></li></ul><h3 id="网络交换模型：稳定结果"><a href="#网络交换模型：稳定结果" class="headerlink" title="网络交换模型：稳定结果"></a>网络交换模型：稳定结果</h3><ul><li>不稳定性：给定一个匹配结果，不再该结果匹配中的一条边，其两个端点的X和Y的价值之和小于1，“偷走已有的匹配”</li><li>稳定性：网络交换不包含任何不稳定性</li><li>稳定结果的应用</li><li><p>稳定结果的局限性</p><ul><li>不会做出阶段结果的假设</li><li>对具有微妙权力差别的网络作用有限</li></ul></li></ul><h3 id="网络交换模型：平衡结果"><a href="#网络交换模型：平衡结果" class="headerlink" title="网络交换模型：平衡结果"></a>网络交换模型：平衡结果</h3><ul><li>给定网络的其余部分为每个节点提供的最好外部选项，一个交换结果成为平衡的条件是，对匹配中的每条边来说，价值的划分体现了两个节点纳什议价的结果。“考虑纳什议价解对剩余部分和均分”</li></ul><h3 id="讨论议价的一种博弈论方法"><a href="#讨论议价的一种博弈论方法" class="headerlink" title="讨论议价的一种博弈论方法"></a>讨论议价的一种博弈论方法</h3><ul><li>动态博弈</li><li><p>博弈的分析</p><ul><li><p>有穷视野的议价博弈</p><ul><li><p>议价的两阶段版本</p><ul><li>回报期望计算</li></ul></li></ul></li><li><p>无穷视野的议价博弈</p><ul><li>博弈的结构和回报不随时间而改变，具有随时间的平稳性</li><li>破裂概率p趋向0，结果收敛到纳什议价解</li></ul></li></ul></li></ul><h2 id="广告支撑的搜索市场"><a href="#广告支撑的搜索市场" class="headerlink" title="广告支撑的搜索市场"></a>广告支撑的搜索市场</h2><h3 id="广告业作为一种匹配市场"><a href="#广告业作为一种匹配市场" class="headerlink" title="广告业作为一种匹配市场"></a>广告业作为一种匹配市场</h3><ul><li>点击率和点击收入</li><li>构造匹配市场</li><li>获得市场清仓价格</li></ul><h3 id="在匹配市场中鼓励真实出价：VCG原理"><a href="#在匹配市场中鼓励真实出价：VCG原理" class="headerlink" title="在匹配市场中鼓励真实出价：VCG原理"></a>在匹配市场中鼓励真实出价：VCG原理</h3><ul><li><p>VCG机制</p><ul><li>最大化社会福利：出价最高的竞拍者中标</li><li>获胜者所支付的费用等于他因这个商品对其他竞拍者造成的“损失”</li></ul></li><li><p>运用到匹配市场中</p><ul><li>卖方拥有独立私密的估价</li><li>VCG价格计算</li></ul></li><li><p>VCG价格制定机制</p><ul><li>不同于市场清仓价格中由卖方制造的“通告价格”</li><li>买方制造的“个性价格”</li><li>次价拍卖是VCG价格机制的一种特例</li></ul></li></ul><h3 id="分析VCG机制：真实报价是一个占优策略"><a href="#分析VCG机制：真实报价是一个占优策略" class="headerlink" title="分析VCG机制：真实报价是一个占优策略"></a>分析VCG机制：真实报价是一个占优策略</h3><ul><li>买方报告虚假估价不会带来更高的回报</li></ul><h3 id="广义次价拍卖（GSP）"><a href="#广义次价拍卖（GSP）" class="headerlink" title="广义次价拍卖（GSP）"></a>广义次价拍卖（GSP）</h3><ul><li>第i位的广告商支付排在第i+1位的广告商的报价乘广告位i的点击率</li><li>分析GSP</li><li>说实话不一定形成纳什均衡</li><li><p>多重和非最优均衡</p><ul><li>存在多种均衡出价组合，其中一些均衡形成的广告商和广告位的分配形式并不产生社会最优分配</li></ul></li></ul><h3 id="广义次价拍卖的均衡"><a href="#广义次价拍卖的均衡" class="headerlink" title="广义次价拍卖的均衡"></a>广义次价拍卖的均衡</h3><ul><li>GSP机制总存在买组社会最优的均衡出价</li></ul><h3 id="广告质量"><a href="#广告质量" class="headerlink" title="广告质量"></a>广告质量</h3><h3 id="VCG价格从定义上看是个性化价格，但始终都是市场清仓价格"><a href="#VCG价格从定义上看是个性化价格，但始终都是市场清仓价格" class="headerlink" title="VCG价格从定义上看是个性化价格，但始终都是市场清仓价格"></a>VCG价格从定义上看是个性化价格，但始终都是市场清仓价格</h3><p><em>XMind - Trial Version</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络中的市场与策略性互动&quot;&gt;&lt;a href=&quot;#网络中的市场与策略性互动&quot; class=&quot;headerlink&quot; title=&quot;网络中的市场与策略性互动&quot;&gt;&lt;/a&gt;网络中的市场与策略性互动&lt;/h1&gt;&lt;p&gt;这本书看完快一个月了，是今年接触到的讲解最细致的一本书，案例</summary>
      
    
    
    
    <category term="网络" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/网络/"/>
    
    
    <category term="网络" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/网络/"/>
    
  </entry>
  
  <entry>
    <title>《网络、群体与市场——揭示高度互联世界的行为原理与效应机制》第二部分—博弈论</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2020/11/08/gametheory/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2020/11/08/gametheory/</id>
    <published>2020-11-08T06:38:47.000Z</published>
    <updated>2020-12-01T03:12:23.415Z</updated>
    
    <content type="html"><![CDATA[<p><img src="gametheory.png" alt="gametheory"></p><p>对《网络、群体与市场——揭示高度互联世界的行为原理与效应机制》中的第二部分内容的简要整理。</p><h2 id="博弈"><a href="#博弈" class="headerlink" title="博弈"></a>博弈</h2><h3 id="人们的决策结果不仅取决于他们在不同的备择项之间进行选择，而且取决于与他们互动的其他人所做的选择"><a href="#人们的决策结果不仅取决于他们在不同的备择项之间进行选择，而且取决于与他们互动的其他人所做的选择" class="headerlink" title="人们的决策结果不仅取决于他们在不同的备择项之间进行选择，而且取决于与他们互动的其他人所做的选择"></a>人们的决策结果不仅取决于他们在不同的备择项之间进行选择，而且取决于与他们互动的其他人所做的选择</h3><h3 id="博弈的基本要素"><a href="#博弈的基本要素" class="headerlink" title="博弈的基本要素"></a>博弈的基本要素</h3><ul><li>博弈参与人</li><li>每个参与人都有一组关于如何行动的备选项</li><li>每个策略行为的选择，都会是参与人得到一个受益（回报），收益结果互动中他人策略选择的影响</li></ul><h3 id="博弈中的行为推理"><a href="#博弈中的行为推理" class="headerlink" title="博弈中的行为推理"></a>博弈中的行为推理</h3><ul><li><p>基本假设</p><ul><li>参与人关心的所有事都表达在自己的回报中</li><li>参与人对博弈的结构充分了解</li><li>每个人个体策略都为了达到自身收益最大化，并知道其他参与人也会选择收益最大化的策略</li></ul></li><li><p>案例</p><ul><li>囚徒困境</li><li>报告-考试博弈</li><li>军备竞赛</li></ul></li></ul><h3 id="最佳应对与严格占优策略"><a href="#最佳应对与严格占优策略" class="headerlink" title="最佳应对与严格占优策略"></a>最佳应对与严格占优策略</h3><ul><li><p>最佳应对：参与人的最好选择，参与人1用策略S产生的收益大于或等于任何其他决策，则称参与人1的策略S是参与人2的策略T的最佳应对。</p><ul><li>严格最佳应对：收益严格大于其他选择</li></ul></li><li><p>占优策略：该策略对于参与人2的每一策略都是最佳应对</p><ul><li>严格最优策略：替换应对为严格最佳应对</li></ul></li><li><p>案例</p><ul><li>两公司对不同市场的营销策略</li></ul></li></ul><h3 id="纳什均衡"><a href="#纳什均衡" class="headerlink" title="纳什均衡"></a>纳什均衡</h3><ul><li>即使不存在占优策略，也可以通过参与人彼此策略的最佳应对，来预测参与人的策略选择行为</li><li><p>纳什均衡：若S是T的最佳应对，同时T是S的最佳应对，责成策略组（S,T）是一个纳什均衡</p><ul><li>均衡的观点：假设参与人选择的策略彼此间都是最佳应对，且具有一致性。</li></ul></li><li><p>发现纳什均衡的途径</p><ul><li>核查所有个体策略集，寻找他们中的每一项是否是彼此间策略的最佳应对策略</li><li>计算每个参与人对于对方策略的最佳应对，发现互为最佳应对的策略组。</li></ul></li></ul><h3 id="多重均衡：协调博弈"><a href="#多重均衡：协调博弈" class="headerlink" title="多重均衡：协调博弈"></a>多重均衡：协调博弈</h3><ul><li>协调博弈：两个参与人的共同目标是在相同策略上的协调。</li><li><p>案例</p><ul><li>PPT还是Keynote</li></ul></li><li><p>基本协调博弈的变形</p><ul><li>案例：性别战、约定和惯例</li><li>不平衡协调博弈</li></ul></li></ul><h3 id="多重均衡：鹰鸽博弈"><a href="#多重均衡：鹰鸽博弈" class="headerlink" title="多重均衡：鹰鸽博弈"></a>多重均衡：鹰鸽博弈</h3><ul><li>争夺性（鹰）与分享性（鸽）行为：都分享，则收益中等，一方争夺一方分享则收益一高一低，都是争夺则收益很低</li><li>案例：懦夫博弈</li></ul><h3 id="混合策略"><a href="#混合策略" class="headerlink" title="混合策略"></a>混合策略</h3><ul><li>不存在纳什均衡的博弈，通过引入随机性来扩大人们选择的策略集，进而对参与人的行为进行预测</li><li>一旦考虑了参与人策略选择的随机性，“博弈总会存在均衡”</li><li><p>案例</p><ul><li><p>硬币配对</p><ul><li>零和博弈</li><li>攻防博弈</li><li>不存在彼此是最佳配对</li></ul></li></ul></li><li><p>混合策略</p><ul><li>每个参与者的策略表现在概率区间[0,1]间的树，设计选项组H和T的混合。</li><li>每一个选项为“纯策略”，即非混合</li></ul></li><li><p>混合策略收益</p><ul><li>若参与人1选择纯策略H，参与人2选择为q的策略，则参与人1的收益期望是（-1）q+1(1-q)=1-2q.</li><li>若参与人1选择纯策略T，参与人2选择为q的策略，则参与人1的收益期望是（1）q-1(1-q)=2q-1.</li></ul></li><li><p>混合策略的纳什均衡</p><ul><li>互为最佳应对的策略：“每个人参与人都应该随机化自己的行为，让对方在两个策略中的取舍无差异。”“无便宜可占”</li><li>如果我选择了均衡以外的概率，那对方就就会有所倾向性的选择，会占到我的便宜。</li></ul></li></ul><h3 id="混合策略：案例与经验分析"><a href="#混合策略：案例与经验分析" class="headerlink" title="混合策略：案例与经验分析"></a>混合策略：案例与经验分析</h3><ul><li><p>案例</p><ul><li>持球-抛球博弈</li><li>罚点球博弈</li></ul></li><li><p>发现所有的纳什均衡</p><ul><li>博弈中可能同时存在纯策略和混合策略均衡</li><li>检查四种纯结果是否存在形成纳什均衡的情形</li><li>找到互为最佳应对的混合策略p和q；只有当参与人的两个纯策略收益期望相等时才会随机化。</li></ul></li></ul><h3 id="帕累托最优和社会最优"><a href="#帕累托最优和社会最优" class="headerlink" title="帕累托最优和社会最优"></a>帕累托最优和社会最优</h3><ul><li><p>帕累托最优</p><ul><li><p>每个参与者从一个策略集中选择了一个策略，一组策略选择被称为帕累托最优，若不存在其他策略选择使所有参与者得到至少和目前一样高的汇报，且至少有一个参与者会得到严格较高的回报。</p><ul><li>就是没有另外一组策略选择使得参与者都能增加收益，使得他们能一起“高兴”地转到另外一个策略选择上</li></ul></li></ul></li><li><p>社会最优</p><ul><li><p>使参与者的回报之和最大化</p><ul><li>社会最优一定是帕累托最优，帕累托最优不一定是社会最优</li></ul></li></ul></li></ul><h2 id="非优策略与动态博弈"><a href="#非优策略与动态博弈" class="headerlink" title="非优策略与动态博弈"></a>非优策略与动态博弈</h2><h3 id="多人博弈"><a href="#多人博弈" class="headerlink" title="多人博弈"></a>多人博弈</h3><ul><li>一组参与人；每个参与人一组策略；每种可能结果与收益</li><li>博弈的一个结果包括所有参与人一次策略选择的集合，每个参与人i都得到收益Pi</li><li>参与人i的最佳应对</li><li>若一个结果中的每个策略都是其他参与人策略的最佳应对，则称该结果是纳什均衡</li></ul><h3 id="非优策略及其在策略推理中的应用"><a href="#非优策略及其在策略推理中的应用" class="headerlink" title="非优策略及其在策略推理中的应用"></a>非优策略及其在策略推理中的应用</h3><ul><li>一个策略Si被称为严格非优：存在另一个策略Si’，对于其他参与人的任意策略选择都要优于Si</li><li><p>严格非优策略的迭代删除法——简化博弈</p><ul><li>初始博弈中的纳什均衡和经过迭代删除剩下的最终简化博弈的纳什均衡是一致的</li></ul></li><li><p>弱非优策略</p><ul><li>对一个策略，若存在另外一个策略，其带来的收益在所有情况下都至少一样高，并且存在一种情况会严格的更高，则该策略是弱非优</li></ul></li></ul><h3 id="动态博弈"><a href="#动态博弈" class="headerlink" title="动态博弈"></a>动态博弈</h3><ul><li>一些参与人先行动，其他参与人观察先行者的行为，然后再决定自己的策略，其中的顺序也是事先规定的。</li><li>常规形式与扩展形式（博弈树）</li><li><p>动态博弈行为的推理</p><ul><li>博弈树转为常规形式，在进行博弈前，每个参与人都制定关于博弈的方案，涵盖所有可能的结果</li></ul></li><li><p>案例：市场进入博弈</p></li><li><p>扩展形式和常规形表示的微妙区别</p><ul><li>隐藏在扩展形式中的“博弈前的行动”</li></ul></li><li><p>与弱非优策略间的联系</p><ul><li>弱非优策略进行博弈简化时排除的顺序会影响最后的那组纳什均衡</li></ul></li></ul><h2 id="进化博弈论"><a href="#进化博弈论" class="headerlink" title="进化博弈论"></a>进化博弈论</h2><h3 id="许多行为涉及总体中多种生物体的互动，因而任何生物体的成功取决于它和其他生物体间是如何互动的。"><a href="#许多行为涉及总体中多种生物体的互动，因而任何生物体的成功取决于它和其他生物体间是如何互动的。" class="headerlink" title="许多行为涉及总体中多种生物体的互动，因而任何生物体的成功取决于它和其他生物体间是如何互动的。"></a>许多行为涉及总体中多种生物体的互动，因而任何生物体的成功取决于它和其他生物体间是如何互动的。</h3><h3 id="生物体间的互动作用"><a href="#生物体间的互动作用" class="headerlink" title="生物体间的互动作用"></a>生物体间的互动作用</h3><ul><li>案例：大甲虫与小甲虫</li></ul><h3 id="进化稳定策略"><a href="#进化稳定策略" class="headerlink" title="进化稳定策略"></a>进化稳定策略</h3><ul><li>种群里一个生物体的适应性是指它和种群中一个随机相遇的生物体互动而得到的预期收益</li><li>策略T以x占比侵入策略S，值得是总体中有x占比的生物体采用了策略T</li><li>假设一个整数y，当任何其他策略T以x&lt;y程度入侵策略S时，采用测量S的个体的适应性严格高于采用测量T的个体，则称策略S是进化稳定的。</li><li><p>进化稳定策略的一般描述</p><ul><li>（1）a&gt;c或（2）a=c,且b&gt;d则S是进化稳定的</li></ul></li></ul><h3 id="进化稳定和纳什均衡间的关系"><a href="#进化稳定和纳什均衡间的关系" class="headerlink" title="进化稳定和纳什均衡间的关系"></a>进化稳定和纳什均衡间的关系</h3><ul><li>策略S是进化稳定的，则（S,S）是一个纳什均衡</li><li><p>纳什均衡中参与人彼此应对对方的策略都是互动中最佳应对策略</p><ul><li>个体行为</li></ul></li><li><p>进化稳定概念择假设参与人之间无智力和合作的影响，策略潜藏在基因中</p><ul><li>基因决定的种群行为</li></ul></li></ul><h3 id="进化稳定混合策略"><a href="#进化稳定混合策略" class="headerlink" title="进化稳定混合策略"></a>进化稳定混合策略</h3><ul><li>总体一部分采取一种策略，剩余一部分采取另一种策略，如果同一部分中的个体具有相同的适应性，并且入侵则最终会消亡，则存在进化稳定性</li><li>个体具有混合策略，如果使用任何其他混合策略的入侵者最终会消亡，则这也就能被认为是一种进化稳定性</li><li>解释的问题：两种混合种群模式的博弈，那种混合模式能产生更大的预期收益？</li><li>观察统一总体下，不同形式的行为互动，并理解这种互动怎样重塑总体种群的构成。</li></ul><h2 id="网络流量的博弈论模型"><a href="#网络流量的博弈论模型" class="headerlink" title="网络流量的博弈论模型"></a>网络流量的博弈论模型</h2><h3 id="布雷斯悖论"><a href="#布雷斯悖论" class="headerlink" title="布雷斯悖论"></a>布雷斯悖论</h3><ul><li>一个运输网络增加新的资源有时反而会使均衡状态中的性能受损</li></ul><h3 id="均衡交通的社会成本"><a href="#均衡交通的社会成本" class="headerlink" title="均衡交通的社会成本"></a>均衡交通的社会成本</h3><ul><li>一种流量模式的社会成本是所有司机使用这个流量模式时产生的行程时间总和</li><li><p>寻找均衡的交通模式</p><ul><li>利用潜能分析最佳应对过程</li></ul></li><li><p>均衡交通与社会最优的对比</p></li></ul><h2 id="拍卖"><a href="#拍卖" class="headerlink" title="拍卖"></a>拍卖</h2><h3 id="四种拍卖类型"><a href="#四种拍卖类型" class="headerlink" title="四种拍卖类型"></a>四种拍卖类型</h3><ul><li>增价拍卖</li><li>降价拍卖</li><li>首价密封报价拍卖</li><li>次价密封报价拍卖</li></ul><h3 id="不同拍卖形式间的关系"><a href="#不同拍卖形式间的关系" class="headerlink" title="不同拍卖形式间的关系"></a>不同拍卖形式间的关系</h3><ul><li><p>降价拍卖和首价拍卖</p><ul><li>等同</li></ul></li><li><p>增价拍卖和次价拍卖</p><ul><li>区别在于增价有实时互动</li></ul></li></ul><h3 id="次价拍卖"><a href="#次价拍卖" class="headerlink" title="次价拍卖"></a>次价拍卖</h3><ul><li>占优策略是选择竞拍价等于估值</li></ul><h3 id="首价拍卖和其他形式拍卖"><a href="#首价拍卖和其他形式拍卖" class="headerlink" title="首价拍卖和其他形式拍卖"></a>首价拍卖和其他形式拍卖</h3><ul><li>稍微降低出价（比估值）能得到正值回报</li><li>全支付拍卖</li></ul><h3 id="公共价值和赢家诅咒"><a href="#公共价值和赢家诅咒" class="headerlink" title="公共价值和赢家诅咒"></a>公共价值和赢家诅咒</h3><ul><li>赢家的估值可能过高导致亏本</li></ul><h3 id="首价和全支付拍卖中的出价策略"><a href="#首价和全支付拍卖中的出价策略" class="headerlink" title="首价和全支付拍卖中的出价策略"></a>首价和全支付拍卖中的出价策略</h3><ul><li><p>首价拍卖中的均衡出价</p><ul><li>一个均衡策略意味着对每一个竞拍者i而言，假如其他竞争者也用策略s(~)，则i就没有偏离s(~)的动机</li></ul></li><li><p>推导策略函数</p><ul><li>微分方程</li></ul></li><li><p>有很多竞拍者的均衡</p></li><li>一般分布</li><li><p>卖方收入</p><ul><li><p>均衡状态下首价次价拍卖收入等同</p><ul><li>竞拍者采用均衡策略时“收入等价”</li></ul></li></ul></li><li><p>底价</p><ul><li>最优底价是商品估值和竞拍者的最大可能的中间值</li></ul></li><li><p>全支付拍卖中的均衡出价</p><ul><li>竞拍人数增加，竞拍者应大大减少出价</li><li>证明类似上面</li></ul></li></ul><p><em>XMind: ZEN - Trial Version</em></p><p>博弈这个视角很有意思，看完感觉各种东西都能套一套，但是总有一种潜在的理性人假定，有点太“直”了吧。可能在经济或者一些宏观层面上很适用，但是在意见市场或者信息沟通中，情况似乎复杂很多，比如收益判断的尺度就比较难衡量，是不是需要考虑不懂博弈规则的人如何入场参与，收益如何判定，多种博弈同时存在的情况等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;gametheory.png&quot; alt=&quot;gametheory&quot;&gt;&lt;/p&gt;
&lt;p&gt;对《网络、群体与市场——揭示高度互联世界的行为原理与效应机制》中的第二部分内容的简要整理。&lt;/p&gt;
&lt;h2 id=&quot;博弈&quot;&gt;&lt;a href=&quot;#博弈&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="读书" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/读书/"/>
    
    
    <category term="gametheory" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/gametheory/"/>
    
    <category term="博弈" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/博弈/"/>
    
    <category term="网络" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/网络/"/>
    
  </entry>
  
  <entry>
    <title>《现实社会的建构》与《技术垄断》：人文主义偏向的社会研究</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2020/10/03/socialconstruction/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2020/10/03/socialconstruction/</id>
    <published>2020-10-03T14:45:16.000Z</published>
    <updated>2020-10-03T14:45:25.468Z</updated>
    
    <content type="html"><![CDATA[<p>《现实社会的建构》与《技术垄断》：人文主义偏向的社会研究</p><p>很久没有时间静下心来把所看所想写下来，一方面是觉得以自己现在的水平实在难以写多么深刻，但另一方面又害怕猴子掰玉米似的阅读过程，因此还是记一下最近读的两本书，语言非常平实和有趣。之所以把《现实社会的建构》和《技术垄断》放在一起，源于两本书对社会学或传播学的人文主义属性异口同声的强调，对我产生了较大冲击。</p><p>《现实生活的建构：知识社会学论纲》这本书由彼得·伯格和托马斯·卢克曼所著，“吹响了20世纪后半期西方思想界‘社会建构主义’的号角”，这本书主要讲了被人熟知的“社会化”过程，知识社会学把人类现实理解为社会建构的过程。此书的核心观点是：<strong>社会是由外化、客体化和内化三个步骤所组成的辩证过程。</strong>社会是人的产物，社会是客观现实，人是社会的产物。在细节上，此书指出社会的<strong>外化</strong>依靠知识来实现<strong>正当化</strong>，正当化形式由低到高可包括语言、谚语、道德准则、理论、象征世界，面对挑战时，象征世界具有<strong>维护装置</strong>，维护方法有：<strong>治疗和虚无</strong>；客观的社会现实形成后，通过<strong>初级社会化</strong>、<strong>次级社会化</strong>的来实现个体的内化，使个体成为社会的一员，借助初级社会化，儿童实现对<strong>概化他人</strong>的认同，借助次级社会化获取角色的专属知识，除此之外，个人还有进行<strong>再社会化</strong>的可能。</p><p>一些摘录：</p><blockquote><p>借助于语言和以语言为基础的认知工具，知识将世界客体化了。有关社会的知识可被理解为一种“实现”，它具有两层含义：一是客体化的社会现实被理解了，二是这一现实被不断生产出来。（p87)</p></blockquote><blockquote><p>制度化的行为越多，就越可以预测和控制人们的行为。</p></blockquote><blockquote><p>社会的知识库由普遍知识与特定角色的专属知识两部分组成。</p><p>从制度秩序的视角来看，角色是客观累积起来的制度化知识的表征和中转者；从角色的视角看，每个角色都带有社会定义的附属知识。</p></blockquote><blockquote><p>对活动的社会引导乃是制度化的本质，而制度化是现实的社会建构的基础。(p225)</p></blockquote><p>《技术垄断：文化向技术投降》与《童年的消逝》、《娱乐至死》并称为尼尔·波斯曼的“媒介批评三部曲”，尼尔·波斯曼是媒介环境学派的第二代学者，在这本书中，波斯曼提出了文化的三种形态：<strong>工具使用文化</strong>阶段，技术服务、从属于文化；<strong>技术统治文化</strong>阶段，技术向文化发起攻击，并试图取而代之；<strong>技术垄断文化</strong>阶段，技术使信息泛滥成灾，使传统世界观消失，技术垄断重新界定宗教、艺术、家庭等的意义，使这些定义服从技术要求，技术垄断就是极权主义的技术统治。</p><p>作者以美国为背景进行分析，他指出了技术带来的危险，包括失去控制机制的信息过剩，以民意测验、智力测验以及各种专家的方式对社会生活实施侵犯；作者通过医疗技术垄断来鲜明的论证了这种机器意识形态，技术重构了医患关系。计算机深化了人的机器隐喻，并被奉为圭臬。各种形式的技术尽管是由人所创造的，但我们似乎逐渐忽略了这种因果关系，而把技术垄断作为我们的生存条件。作者主要攻击了对科学趋之若鹜的<strong>“社会科学家”</strong>，“和科学不一样，社会研究从来不发现任何东西。它只是重新发现人们过去知道、现在需要重述的东西。”<strong>“唯科学主义”</strong>相信，某种标准化的程序即“科学”能够提供一种无懈可击的道德权威的源泉，一种超人的基础，但科学其实是不能回答这些问题的。</p><p>较为有趣的是作者在第十章《符号大流失》这一章节强调了技术垄断时代符号的委琐化现象，“符号使用得越频繁，符号的意义就越是削弱。”技术垄断与商业资本主义的合谋下，符号被去情境的、无节制的使用，这或许可以看作技术垄断冲击传统秩序的方式。</p><p>一句摘录：</p><blockquote><p>科学表述和非科学表述的区别是，社会表述可以经受证伪的考验。科学之所以能够成立，并不是我们有能力辨认“真理”，而是我们有能力辨认谬误。</p></blockquote><p>尽管这两本书来自不同学科视野，却具有一定的互相补充作用，《技术垄断》所论述的技术垄断的形成过程其实可以完美的嵌入到社会建构主义的理论解释框架之中，并映射到现实语境之中。技术垄断是作为一种观念的技术被正当化和制度化的过程，挑战了旧有的人文主义秩序，技术的内化也是人被异化的过程。此类著作往往通过分析抛出了一系列有趣的问题，或许可以看做生产知识建构现实的过程，但很少就问题提出具体解决方案。</p><p>显而易见的是，两位作者都对社会研究或未来具有强烈的价值判断，他们强调社会研究的人文主义属性，这个问题也是最近某同学和我辩论的话题，社会研究处于文学和科学之间的尴尬位置，这不应是一个对错问题；以计算、数据、统计为代表的实证主义在这两本书中显得视野是如此狭小逼仄，人文主义以其历史的宽广胸襟将其包裹，让我几乎对意义产生了怀疑。仅依靠数据是不能解决问题的，统计分析的结果似乎以目标和效率为导向，预测本身就带有控制色彩和保守主义倾向，所以往往和科学管理联系紧密， 如果仅仅是帮助我们认识现实的话，历史的和人文的情境不应该被忽略，要放宽问题的视野。在技术垄断已成为背景的今天，人文的光彩或许需要依靠技术来实现吧。应该看点别的书，不然被套在里面了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;《现实社会的建构》与《技术垄断》：人文主义偏向的社会研究&lt;/p&gt;
&lt;p&gt;很久没有时间静下心来把所看所想写下来，一方面是觉得以自己现在的水平实在难以写多么深刻，但另一方面又害怕猴子掰玉米似的阅读过程，因此还是记一下最近读的两本书，语言非常平实和有趣。之所以把《现实社会的建构》</summary>
      
    
    
    
    <category term="读书" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/读书/"/>
    
    
    <category term="人文主义" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/人文主义/"/>
    
    <category term="媒介环境学派" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/媒介环境学派/"/>
    
  </entry>
  
  <entry>
    <title>《计算传播学导论》阅读</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2020/05/18/jisuanchuanbo/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2020/05/18/jisuanchuanbo/</id>
    <published>2020-05-18T00:21:08.000Z</published>
    <updated>2020-05-18T00:24:42.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《计算传播学导论》阅读"><a href="#《计算传播学导论》阅读" class="headerlink" title="《计算传播学导论》阅读"></a>《计算传播学导论》阅读</h1><blockquote><p>2019年10月读</p></blockquote><p>此书分为八章，分别为<em>导论、文本分析、情感分析、语义建模、网络传播与传播网络、网络传播模型与机器学习框架、数据新闻、计算广告。</em>除了网络传播与传播网络、计算广告等部分，其它部分在阅读前我已有些许涉猎或实践。它把数据科学、网络科学等技术和思维同传播学研究相结合，一定程度上解决了我的“机器学习/深度学习更倾向于应用领域，可解释性差，不能用于科研“等类似的困惑。相较于此前见到的一些描述数据与传播关系的书籍，这本书结构清晰明了，内容充实，总结了理论的缘由，而且目前国内这种著作也并不是很多，因而对于我这种入门者和初学者意义非常，较为遗憾的地方是对深度学习提及较少。</p><p>因为封面和纸张的手感很好，图片也解释很清楚，所以读得很快，大概用了八九天，整理此篇笔记又用了好多天，后面又对书中案例进行了尝试。</p><p>下面是我对书中部分内容的摘录：</p><h3 id="第一章-导论"><a href="#第一章-导论" class="headerlink" title="第一章 导论"></a>第一章 导论</h3><ul><li>计算传播的定义：计算传播学致力于寻找传播学可视化的基因，以传播网络分析、传播文本挖掘、数据科学等为主要分析工具，大规模地收集并分析人类传播行为数据，挖掘人类传播行为背后的模式和法则，分析模式背后的生成机制与基本原理。</li></ul><h3 id="第二章-文本分析简介"><a href="#第二章-文本分析简介" class="headerlink" title="第二章 文本分析简介"></a>第二章 文本分析简介</h3><ul><li>常用的文本挖掘技术：文本分类、文本聚类、关联分析、趋势预测。</li><li>文本分析与传播学研究：情感的传染、个体情感变化规律、文本特征提取、文本与社会文化变迁、利用文本进行个体行为预测、表示学习等</li><li>基本步骤：语词切割、去停用词、标准化（词干提取/词形还原）、词性标注、构建语词-文档矩阵（TF-IDF）</li><li>python库：NLTK、Textmining、Gensim和Lda、JiebaR、补充中文文本内容处理库SnowNLP</li></ul><h3 id="第三章-情感分析"><a href="#第三章-情感分析" class="headerlink" title="第三章 情感分析"></a>第三章 情感分析</h3><ul><li>情感分析内容五元组：第一、意见对象，第二、具体层面、特点，第三、情感倾向，第四、意见主题，第五、时间</li><li>情感分析是用来探究人们对于事件、话题、产品、服务等对象的态度</li><li>情感分析实现途径：1、人工标注，2、利用情感词典匹配，3、利用语词共生网络关系对情感倾向进行推断</li><li>与传播学联系：用户评价与口碑营销、社会化媒体虚假信息判定、社会化媒体情绪刻画与情绪传播</li><li>python实现：Textblob、Snownlp</li><li>基本算法：</li></ul><ol><li>语词的情感倾向判定：点式互信息方法PMI（比较两个词语共同出现的概率与其独自出现的概率，从而判定两个的出现是否是独立事件。）<br>词汇的PMI指数计算：PMI（x=olympic，y=happy）-PMI（x=olympic，y=disgust）=0.46</li><li>句子的情感分析-基于词典匹配：预处理，载入情感词典判定情感极性，判定否定词与程度副词，计算得分，加总</li><li>句子的情感分析-有监督学习：特征提取（互信息算法（词语与类别的互信息）、卡方算法（词语与词语出现期望，与类别独立的假设检验））、朴素贝叶斯算法</li></ol><h3 id="第四章-语义建模"><a href="#第四章-语义建模" class="headerlink" title="第四章 语义建模"></a>第四章 语义建模</h3><ul><li>语义建模与传播学研究：“框架理论”与语义建模的结合：公共事件的话语框架是指关于社会事件有组织的中心观点和诠释架构。框架建构是个人组织、阐释事件的主观过程，即参与个体通过对信息的选择与解读，突出强调事件的某些特征，从而1.定义事件；2.判定事件因果关系；3.提出事件解决方案。归纳为三种研究路径：1.强调个体认知效果，人们如何运用信息形成对事件的印象；2.强调框架构建参与者行为；3.对话语框架内容的研究，社会文化共振、关涉群体活动以及媒介实践是公共事件话语框架内容的主要决定因素。</li><li>LDA（Latent Dirichlet Allocation）是一种文档主题生成模型，也称为一个三层贝叶斯概率模型，包含词、主题和文档三层结构。所谓生成模型，就是说，我们认为一篇文章的每个词都是通过“以一定概率选择了某个主题，并从这个主题中以一定概率选择某个词语”这样一个过程得到。文档到主题服从多项式分布，主题到词服从多项式分布。LDA优势在于能够在没有基本话题预设的基础上，从文本抽取出主题。缺陷在于无法有效验证准确性。<br>理解参考（<a href="https://blog.csdn.net/tozhangning/article/details/80642519）" target="_blank" rel="noopener">https://blog.csdn.net/tozhangning/article/details/80642519）</a><br>实现：Gensim</li><li>有监督机器学习分类算法：sickit-learn实现；六个模块：分类、回归、聚类、降维、模型选择、预处理。</li></ul><h3 id="网络传播与传播网络"><a href="#网络传播与传播网络" class="headerlink" title="网络传播与传播网络"></a>网络传播与传播网络</h3><ul><li>热点研究问题：用户传播能力度量与意见领袖发现、传播最大化、信息流行度预测、用户传播行为预测、传播路径预测与重构。</li><li>社会网络的拓扑结构特征：<ol><li>节点的度特征：节点的度、网络平均度（2n/m）、网络密度（2n/m（m-1））、节点的度分布（幂率分布）</li><li>匹配特性：复杂网络中不同度的节点间的连边存在情况；匹配系数（r大于0，同配，r小于0异配）；网络中邻居节点的平均度与节点度的相关性。</li><li>聚类系数：衡量网络中节点集团化的一个系数。全局聚类系数（聚类系数、三角形、三点组、所有节点聚类系数平均值0～1，=1表示全部连接）；局部聚类系数（该节点与邻居节点的集团性质）</li><li>平均最短距离长度：所有节点间最短距离的平均值，衡量是否是“小世界网络”</li><li>小世界网络特性：网络既具有较大的聚类系数又具有较短的平均距离。（复杂传播、信息扩散阈值模型）</li><li>富人俱乐部特性：节点度很大、数量很少的富节点倾向于彼此之间相互连接。（富人俱乐部系数）</li><li>弱链接与强链接：强链接消费更多同质性信息，弱链接消费差异化信息，有利于信息扩散。</li></ol></li><li>传播网络的拓扑结构统计量：<ol><li>传播的高度和宽度：根节点到子节点的最大跳数；各深度阶上节点数量的最大值。多数信息高度很小。</li><li>传播的规模与扩散率：少数信息的扩散规模特别大，多数信息的扩散规模有限；扩散率可化了用户传播某一条信息的程度（转发数量/扩散规模）</li><li>级连率：刻画了一个用户在多大程度上影响他的好友（跟随用户u转发/总转发）</li><li>结构性病毒式传播特征：主要考察某些无法观测到的生成机制引起的可观察到的模型结构上独有的特征。</li></ol></li><li>社会网络和传播网络之间的结构相关性：<ol><li>多层耦合网络</li><li>双层网络链接整体相关性的统计量：网络对应长向量的皮尔逊相关系数；网络对长向量的互信息；整体堆叠程度；局部堆叠程度</li></ol></li><li>传播加权网络的多维度测量：<ol><li>节点强度</li><li>边权重与网络拓扑结构的相关性</li><li>加权网络中的权匹配特性：加权匹配系数、邻居节点的加权平均度</li><li>加权平均最短距离长度（Dijkstra）</li><li>加权聚类系数：全局、局部</li><li>加权富人俱乐部特性：考虑权重、加权富人俱乐部系数：连接权重最大的边是否存在于强度最大的节点之间</li></ol></li><li>传播时效网络：增加时间维度<ol><li>接触序列、区间图</li><li>爆发性：峰值时间、峰值比率（峰值/扩散规模）、变异系数（标准差/均值， 扩散曲线稳定程度）</li><li>衰减时间（峰值时间～扩散规模75%的时间）</li><li>持续性：利用早期扩散数据预测在线内容流行度</li><li>传播速度</li><li>时效中心性： 时效度中心性（节点的重要性）、时效度接近中心性、时效介数中心性（介数偏好性）</li></ol></li></ul><h3 id="第六章-网络传播模型与机器学习框架"><a href="#第六章-网络传播模型与机器学习框架" class="headerlink" title="第六章 网络传播模型与机器学习框架"></a>第六章 网络传播模型与机器学习框架</h3><ul><li>在计算传播学的研究背景下，基于机器学习的信息传播分析将是主流的研究范式。</li><li>信息传播模型：<ol><li>创新扩散模型： 罗杰斯，一个新技术在社会系统中扩散需要四个必要条件：创新、传播渠道、时间以及社会系统。五类采纳者：创新者、早期采纳者、早期大多采纳者、晚期大多采纳者以及拖后腿者。意见领袖的特点：1.参与更多外界沟通；2.更国际化；3.更高的社会地位；4.更具创新性；5.具有结构化优势，处于人际网络中的中心位置。</li><li>传染病模型：种群内的个体状态：易染状态S、感染状态I、移除状态R。基本传染病模型：SI、SIS、SIR</li><li>阈值模型：假设每个人在决定参与某一活动时，都要跨过一个门槛，这个门槛的存在是由行为成本和收益的大小决定。</li><li>级联模型：当一个个体扁的活跃后，会以一定的概率激活它邻居中的每一个不活跃的个体。</li><li>分支过程模型：一个信息源将信息发给好友，这些好友又发给他们的好友。基本再生数R0=pk，信息扩散与传播意愿p和网络结构k有关。</li></ol></li><li>信息传播的机器学习分析框架：<ol><li>四个步骤：数据获取、预处理、特征工程、特征选择与评价标准。</li><li>分析某个话题扩散主要有两种方式：1.描述某个主题下所有信息的扩散情况；2.分析一条信息完整的扩散过程、分析影响信息传播的各种因素。</li></ol></li><li>影响信息传播的其他因素：<ol><li>用户地理位置</li><li>信息自身属性</li><li>用户属性</li><li>用户间的趋同性</li><li>用户活跃时间</li></ol></li><li>特征选择方法：从原始特征集中选择能使某种评价指标最优的特征子集<ol><li>特征选择方法大致可分为过滤法（依靠数据内在属性评估特征的相关性，如皮尔逊相关系数、互信息等）和封装法（将模型假设搜索加入到特征选择过程，以分类器的预测效果为引导）。</li><li>基于XGBoost模型的特征排序：梯度提升机，不需要做特征的归一化，可以自动进行特征选择，可解释性好。特征评分可以看成被用来分离决策树的次数，评分越高，特征越重要。</li><li>基于最大信息系数的特征相关性分析：Pearson相关系数、最大信息系数MIC<em>（？）</em>相关系数（可判断函数关系或非函数关系、普适性、公平性、对称性）</li></ol></li><li>信息传播的机器学习评价指标：<ol><li>分类问题：混淆矩阵、准确率、召回率、F1值、精度</li><li>回归问题的评价指标：MSE、RMSE、MAE平均绝对百分比误差MAPE（微博转发量差异大可用</li></ol></li><li>基于实证数据的信息流行度预测：<ol><li>结构特征 XGBoost、MIC     </li><li>文本特征对信息流行度的影响： XGBoost、MIC</li><li>预测：XGBoost</li></ol></li></ul><h3 id="第七章-数据新闻"><a href="#第七章-数据新闻" class="headerlink" title="第七章 数据新闻"></a>第七章 数据新闻</h3><h4 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h4><blockquote><p>阅读此章节后，引发许多思考，有些后悔没有早点接触此书，导致第一个数据新闻作品沦为“四不像”的境地。在此对之前数据新闻作业再次进行复盘：<br>1、选题上：没有做到<em>数据驱动</em>、没有获得一手数据；因而没有提炼出一个数据特征为导向的主题，反而是先定性已经发生的事件，然后从数据中找依据，数据的作用旁落。<br>2、内容设计上：今天才发觉一个致命点，数据的前提是提供“新闻”，提供知识，而知识是客观的一种经验，数据新闻的突出特点是客观真实，我们却在设计中<em>通过拟人化编制了一个故事，损坏了新闻的客观性忽略了数据新闻的新闻本质。</em>如果从一个信息接收者角度讲，这种有点像虚构写作的内容，提供的信息可信度能有多少？反而更像是无良小编的恶意炒作。因此文字应该以数据为中心进行解释。<br>3、界面制作上：<em>整洁简约、突出关键数据</em>应该是第一要务，交互虽然能提升用户体验但是不能滥用，应是作为点睛之笔进行突出，这也和最近的新媒体营销课的内容有共通之处，形式与新技术的运用固然是有趣的，但是并不能给人留下深刻印象，甚至给人花里胡哨之感，关键仍是从数据中提炼出足够具有区分度和现实意义的内容主题，并在界面中对主题进行突出。<br>4、可视化设计上：设计美感很重要，要提前进行整体的宏观美工设计、颜色搭配、元素样式等等，再进行微观设计，二者要协调，要求要有良好的沟通。<br>5、代码：在有整体设计图的情况下进行网页等代码制作，借助框架减少代码量，提升易读性。a、、我的前端代码真是trashy。<br>6、多种人力和工作的整合：需要一条规范完整的生产线，不要崇拜技术，设计、审美、技术、批判、想象都很重要。</p><ul><li>数据新闻强调批判思维、计算思维、可视化思维三种能力的结合。（“知识”和“艺术”）</li><li>理论源流：以计算驱动的新闻报道；以可视化驱动的新闻报道。“不应该忘记数据叙事的根本目的在于提供新的知识，增进公众对于社会现实的理解，促进机体的智慧。如果仅停留在讲故事层面，数据新闻与其他新闻形式就没有本质的区别。”</li><li>南丁格尔玫瑰图、安斯库姆数据，可视化对统计分析的重要性</li><li>图像的曲解：撒谎因子=图像中呈现的效果值/数据中的效果值</li><li>探索可视化（数据分析）和解释可视化（视觉呈现）</li><li>塔夫特提出好的可视化应展现九个方面的事情：1、展现数据；2、引导读者思考数据；3、避免歪曲数据所表达的内容；4、使用有限的空间尽可能展现尽量多的数字；5、保持大数据集的一致性；6、鼓励验证比较数据中的不同部分；7、从整体到精细结构；8、服务于一个明确的目的；9、数据可视化要解惑对于数据的统计描述和文字描述。</li><li><em>制作流程：1、确定数据新闻选题；2、数据的收集和掌握；3、数据的分析和解读；4、数据新闻的写作与可视化呈现。</em>核心是数据驱动，原因：重大新闻选题需要具有高质量的数据支撑才能更好的实现；有一部分数据新闻的选题是在探索数据的过程中产生的。</li><li>对于可视化为主的数据新闻生产而言，更加强调可视化的设计过程，由设计师、编辑、数据分析师三方协同完成。</li></ul></blockquote><h3 id="第八章-计算广告"><a href="#第八章-计算广告" class="headerlink" title="第八章 计算广告"></a>第八章 计算广告</h3><ul><li>计算广告的核心调整在于找到一个特定的媒体情景下一个特定的用户和一个适合的广告之间的最佳匹配。</li><li>企业营销战略的四个部分（4P）：产品、价格、渠道、促销。</li><li>互联网广告的投放过程包括四步：一是建立离线模型。二是实时监控。三是精准投放。四是等待用户点击然后获利。</li><li>广告分为四种类型：合约广告、竞价广告（竞价拍卖、搜索广告）、程序化交易广告（实时竞价）、原生广告。</li><li>优化目标：收入成本差，依据不同自变量而调整。</li><li>计算广告市场的博弈、拍卖与分配：<ol><li>博弈的三个基本要素：参与人、策略和收益</li><li>收益矩阵、纳什均衡/收益均衡 、占优策略、帕累托最优（找不到一组博弈策略使得不减少任何人收益的情况下增加至少一个人的收益，社会最优一定是帕累托最优，帕累托最优未必是社会最优）</li><li>拍卖：公开拍卖：增价拍卖（英式拍卖）、降价拍卖（荷兰式拍卖）；密封拍卖：首家密封拍卖、次价密封拍卖（维克瑞拍卖）</li><li>匹配：二部图；完美匹配：每个广告位都可以对应一个广告主；受限组；清仓价格；匈牙利算法（逐步提高受限组的广告位价格来实现最优分配）</li></ol></li><li>计算广告市场中的拍卖机制设计：鼓励真是报价；维克瑞-克拉夫-格罗夫VCG（出价为一个人的行为给别人造成的损失价格）拍卖和广义次价拍卖GSP（次价收费）</li><li>广告位估价=点击率CTR*广告主网站点击价值CV</li><li>广义首价拍卖：估价排序</li></ul><ul><li>完成=昏厥</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《计算传播学导论》阅读&quot;&gt;&lt;a href=&quot;#《计算传播学导论》阅读&quot; class=&quot;headerlink&quot; title=&quot;《计算传播学导论》阅读&quot;&gt;&lt;/a&gt;《计算传播学导论》阅读&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;2019年10月读&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    <category term="计算传播" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/计算传播/"/>
    
    
    <category term="读书" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/读书/"/>
    
  </entry>
  
  <entry>
    <title>新浪微博话题下微博采集</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2020/04/23/weibo-topic/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2020/04/23/weibo-topic/</id>
    <published>2020-04-23T07:36:15.000Z</published>
    <updated>2020-04-23T07:49:08.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新浪微博话题下微博采集"><a href="#新浪微博话题下微博采集" class="headerlink" title="新浪微博话题下微博采集"></a>新浪微博话题下微博采集</h1><p><u>Typora</u>这个Markdown编辑器过于简洁大方。另，第三方采集器有些鸡肋。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开始采集</span></span><br><span class="line">data_ = []</span><br><span class="line">url = <span class="string">'https://s.weibo.com/weibo?q=%23%E4%B8%96%E7%95%8C%E5%9C%B0%E7%90%83%E6%97%A5%23&amp;page='</span></span><br><span class="line">error = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">60</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page = i + <span class="number">1</span></span><br><span class="line">        print(<span class="string">'正在获取第'</span>,page,<span class="string">'页'</span>)</span><br><span class="line">        weibos = get_page_weibos(url,page)</span><br><span class="line">        weibo_getinfo(weibos)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        error += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'error!'</span>)</span><br><span class="line">        <span class="keyword">if</span> error &gt; <span class="number">5</span>:</span><br><span class="line">            print(<span class="string">'错误大于5次退出采集'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">print(<span class="string">'采集完成'</span>)</span><br></pre></td></tr></table></figure><h2 id="读取单页微博"><a href="#读取单页微博" class="headerlink" title="读取单页微博"></a>读取单页微博</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取单页微博</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page_weibos</span><span class="params">(url,page)</span>:</span></span><br><span class="line">    <span class="comment">#url = 'https://s.weibo.com/weibo?q=%23毕业前最后一次寝室夜谈%23&amp;page='</span></span><br><span class="line">    url = url + str(page)</span><br><span class="line">    headers = &#123;</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span></span><br><span class="line">            , <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, sdch'</span></span><br><span class="line">            , <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8'</span></span><br><span class="line">            , <span class="string">'Cache-Control'</span>: <span class="string">'max-age=0'</span></span><br><span class="line">            , <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span></span><br><span class="line">            , <span class="string">'Content-Type'</span>:<span class="string">'text/html;charset=utf-8'</span></span><br><span class="line">            ,<span class="string">'Cookie'</span>: 你的cookie</span><br><span class="line">            , <span class="string">'Host'</span>: <span class="string">'s.weibo.com'</span></span><br><span class="line">            , <span class="string">'Referer'</span>: url</span><br><span class="line">            , <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span></span><br><span class="line">            ,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    </span><br><span class="line">    soup = BeautifulSoup(response.text,<span class="string">'lxml'</span>)</span><br><span class="line">    weibos = soup.find_all(<span class="string">'div'</span>,class_=<span class="string">'card-wrap'</span>)</span><br><span class="line">    <span class="comment">#print(weibos[1])</span></span><br><span class="line">    <span class="keyword">return</span> weibos</span><br></pre></td></tr></table></figure><h2 id="时间戳处理"><a href="#时间戳处理" class="headerlink" title="时间戳处理"></a>时间戳处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="comment">#微博时间戳处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_transform</span><span class="params">(publish_time)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"刚刚"</span> <span class="keyword">in</span> publish_time:</span><br><span class="line">        publish_time = datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">"分钟"</span> <span class="keyword">in</span> publish_time:</span><br><span class="line">        minute = publish_time[:publish_time.find(<span class="string">"分钟"</span>)]</span><br><span class="line">        minute = timedelta(minutes=int(minute))</span><br><span class="line">        publish_time = (</span><br><span class="line">            datetime.now() - minute).strftime(</span><br><span class="line">            <span class="string">"%Y-%m-%d %H:%M"</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">"今天"</span> <span class="keyword">in</span> publish_time:</span><br><span class="line">        today = datetime.now().strftime(<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">        time = publish_time.replace(<span class="string">'今天'</span>,<span class="string">''</span>)</span><br><span class="line">        publish_time = today + <span class="string">" "</span> + time</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">"月"</span> <span class="keyword">in</span> publish_time:</span><br><span class="line">        year = datetime.now().strftime(<span class="string">"%Y"</span>)</span><br><span class="line">        publish_time = str(publish_time)</span><br><span class="line">        <span class="comment">#print(publish_time)</span></span><br><span class="line"></span><br><span class="line">        publish_time = year + <span class="string">"-"</span> +publish_time.replace(<span class="string">'月'</span>,<span class="string">'-'</span>).replace(<span class="string">'日'</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        publish_time = publish_time[:<span class="number">16</span>]</span><br><span class="line">    <span class="keyword">return</span> publish_time</span><br></pre></td></tr></table></figure><h2 id="解析单页微博"><a href="#解析单页微博" class="headerlink" title="解析单页微博"></a>解析单页微博</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解析单页微博</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weibo_getinfo</span><span class="params">(weibos)</span>:</span></span><br><span class="line">    print(len(weibos))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(weibos)):</span><br><span class="line">        <span class="comment">#print(weibos[i])</span></span><br><span class="line">        <span class="comment">#print('---------------------------------------------------------')</span></span><br><span class="line"><span class="comment">#         if len(weibos[i].find_all('strong')) &gt; 0:</span></span><br><span class="line"><span class="comment">#             continue</span></span><br><span class="line">        <span class="comment">#print(len(weibos[i].find_all('div',class_='card-act')))</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#判断</span></span><br><span class="line">        weibo = weibos[i].find(<span class="string">'div'</span>,class_=<span class="string">'card'</span>)</span><br><span class="line">        <span class="keyword">if</span> len(weibos[i].find_all(<span class="string">'div'</span>,class_=<span class="string">'card-act'</span>)) &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment">#mid</span></span><br><span class="line">        mid =  weibos[i][<span class="string">'mid'</span>]</span><br><span class="line">        <span class="comment">#昵称</span></span><br><span class="line">        name =  weibo.find(<span class="string">'a'</span>,class_=<span class="string">'name'</span>).get_text()</span><br><span class="line">        <span class="comment">#内容</span></span><br><span class="line">        content = weibo.find_all(<span class="string">'p'</span>, class_=<span class="string">'txt'</span>)</span><br><span class="line">        content = content[<span class="number">1</span>].get_text() <span class="keyword">if</span> len(content) &gt; <span class="number">1</span> <span class="keyword">else</span> content[<span class="number">0</span>].get_text()</span><br><span class="line">        content = content.strip()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#时间</span></span><br><span class="line">        ptime = weibo.find(<span class="string">'p'</span>, class_=<span class="string">'from'</span>).get_text().split(<span class="string">'来自'</span>)[<span class="number">0</span>].split(<span class="string">'转赞'</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        <span class="comment">#print(ptime)</span></span><br><span class="line">        ptime = str(time_transform(ptime))</span><br><span class="line">        <span class="comment">#图片与视频</span></span><br><span class="line">        image = weibo.find(<span class="string">'div'</span>, class_=<span class="string">'media media-piclist'</span>)</span><br><span class="line">        video = weibo.find(<span class="string">'div'</span>, class_=<span class="string">'media media-video-a'</span>)</span><br><span class="line">        <span class="keyword">if</span> image != <span class="literal">None</span>:</span><br><span class="line">            image_num = len(image.find_all(<span class="string">'img'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            image_num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> video != <span class="literal">None</span>:</span><br><span class="line">            <span class="comment">#print(video)</span></span><br><span class="line">            video_num = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            video_num = <span class="number">0</span></span><br><span class="line">        <span class="comment">#互动信息</span></span><br><span class="line">        inter_info = weibo.find(<span class="string">'div'</span>,class_=<span class="string">'card-act'</span>).find_all(<span class="string">'a'</span>)</span><br><span class="line">        inter_info =  [re.findall(<span class="string">r'\d+'</span>,item.get_text()) <span class="keyword">for</span> item <span class="keyword">in</span> inter_info[<span class="number">1</span>:<span class="number">4</span>] ] </span><br><span class="line">        inter_ = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> inter_info:</span><br><span class="line">            <span class="keyword">if</span> info == []:</span><br><span class="line">                inter_.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                inter_.append(int(info[<span class="number">0</span>]))</span><br><span class="line">        new = [mid, name, content, ptime ,image_num, video_num, inter_[<span class="number">0</span>], inter_[<span class="number">1</span>], inter_[<span class="number">2</span>]]</span><br><span class="line">        <span class="comment">#print(new)</span></span><br><span class="line">        data_.append(new)</span><br><span class="line">        <span class="comment">#print(len(data_))</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;新浪微博话题下微博采集&quot;&gt;&lt;a href=&quot;#新浪微博话题下微博采集&quot; class=&quot;headerlink&quot; title=&quot;新浪微博话题下微博采集&quot;&gt;&lt;/a&gt;新浪微博话题下微博采集&lt;/h1&gt;&lt;p&gt;&lt;u&gt;Typora&lt;/u&gt;这个Markdown编辑器过于简洁大方。另</summary>
      
    
    
    
    
    <category term="爬虫 python" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/爬虫-python/"/>
    
  </entry>
  
  <entry>
    <title>ggplot22学习</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2020/04/08/ggplot2/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2020/04/08/ggplot2/</id>
    <published>2020-04-08T04:02:52.000Z</published>
    <updated>2020-04-08T04:03:48.530Z</updated>
    
    <content type="html"><![CDATA[<p><strong>非常细致的使用介绍</strong><a href="https://www.jianshu.com/p/07f7931a00db?utm_campaign=haruki" target="_blank" rel="noopener">https://www.jianshu.com/p/07f7931a00db?utm_campaign=haruki</a></p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ol><li>数据data和映射mapping</li><li>标度scale</li><li>几何对象Geom</li><li>统计变换Stat</li><li>坐标系统Coord</li><li>图层Layer</li><li>分面Facet</li><li>主题Theme</li><li>存储和输出</li></ol><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ggplot(mpg,aes(x=cty,y=hwy))+geom_point(aes(colour=factor(year),size=displ))+theme(legend.position = &quot;left&quot;)</span><br><span class="line"></span><br><span class="line">#同一坐标轴做对比</span><br><span class="line">ggplot(mpg, aes(x=cty))+geom_point(aes(y=hwy,colour=&quot;red&quot;))+geom_point(aes(y=displ,colour=&quot;green&quot;))</span><br><span class="line">#直方图，纵轴表示密度</span><br><span class="line">ggplot(mpg,aes(x=hwy,y=..density..))+geom_histogram(binwidth =0.5)</span><br><span class="line"></span><br><span class="line">#元素位置调整</span><br><span class="line">ggplot(mpg)+geom_histogram(aes(x=hwy,fill=factor(year)))</span><br><span class="line">ggplot(mpg,aes(x=hwy,fill=factor(year)))+geom_histogram(position=&quot;dodge&quot;)</span><br><span class="line">ggplot(mpg,aes(x=hwy,fill=factor(year)))+geom_histogram(position=&quot;fill&quot;)</span><br><span class="line">ggplot(mpg,aes(x=hwy,y=class))+geom_histogram(stat = &quot;identity&quot;)</span><br><span class="line">ggplot(mpg,aes(x=hwy,fill=factor(year)))+geom_histogram(position = &quot;jitter&quot;)</span><br><span class="line"></span><br><span class="line">ggplot(mpg,aes(x=hwy,fill=factor(year)))+geom_histogram(position=&quot;stack&quot;)</span><br><span class="line"></span><br><span class="line">#条形图</span><br><span class="line">ggplot(mpg,aes(x=class))+geom_bar()</span><br><span class="line">#多重图</span><br><span class="line">library(gridExtra)</span><br><span class="line">p1&lt;-ggplot(mpg, aes(class,hwy))+geom_boxplot()</span><br><span class="line">p2&lt;-ggplot(mpg, aes(class))+geom_bar()</span><br><span class="line">p3&lt;-ggplot(mpg,aes(x=cty, y=hwy))+geom_point()</span><br><span class="line">grid.arrange(p1,p2,p3,ncol=3)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;非常细致的使用介绍&lt;/strong&gt;&lt;a href=&quot;https://www.jianshu.com/p/07f7931a00db?utm_campaign=haruki&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www</summary>
      
    
    
    
    <category term="R, ggplot2" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/R-ggplot2/"/>
    
    
    <category term="R" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>Django之制作todolist</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2020/03/14/todolist/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2020/03/14/todolist/</id>
    <published>2020-03-14T04:20:26.000Z</published>
    <updated>2020-03-14T05:39:56.422Z</updated>
    
    <content type="html"><![CDATA[<p>本案例使用Django框架创建了一个todolist应用。</p><p><img src="todo01.png" alt="效果0"><br><img src="todo02.png" alt="效果1"></p><p>[TOC]</p><h1 id="虚拟环境使用"><a href="#虚拟环境使用" class="headerlink" title="虚拟环境使用"></a>虚拟环境使用</h1><ol><li><p>使用virtualenv</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#创建虚拟环境</span><br><span class="line">virtualenv venv</span><br><span class="line"></span><br><span class="line">#cd到虚拟环境目录</span><br><span class="line">#激活虚拟环境</span><br><span class="line">source ./bin/activate</span><br><span class="line"></span><br><span class="line">#退出虚拟环境</span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line">#删除虚拟环境</span><br><span class="line">rmvirtualenv venv</span><br></pre></td></tr></table></figure></li><li><p>使用virtualenvwrapper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#创建虚拟环境</span><br><span class="line">mkvirtualenv venv</span><br><span class="line"></span><br><span class="line">#列出所有虚拟环境</span><br><span class="line">lsvirtualenv</span><br><span class="line"></span><br><span class="line">#激活虚拟环境</span><br><span class="line">workon venv</span><br><span class="line"></span><br><span class="line">#退出虚拟环境</span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line">#停止虚拟环境所有软件包</span><br><span class="line">rmvirtualenv venv</span><br><span class="line"></span><br><span class="line">#可以使用pip list 查看已安装的包</span><br><span class="line"></span><br><span class="line">#进入虚拟环境目录</span><br><span class="line">cdvirtualenv</span><br><span class="line"></span><br><span class="line">#进入虚拟环境site-packages</span><br><span class="line">cdsitepackages</span><br><span class="line"></span><br><span class="line">#列出目录下所有软件包</span><br><span class="line">lssitepackages</span><br></pre></td></tr></table></figure></li></ol><h1 id="创建project和app的相关步骤"><a href="#创建project和app的相关步骤" class="headerlink" title="创建project和app的相关步骤"></a>创建project和app的相关步骤</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#创建project</span><br><span class="line">django-admin startproject HelloWorld</span><br><span class="line"></span><br><span class="line">#创建app</span><br><span class="line">python manage.py startapp SimpleTodo</span><br></pre></td></tr></table></figure><h2 id="修改HelloWorld-settings-py"><a href="#修改HelloWorld-settings-py" class="headerlink" title="修改HelloWorld/settings.py"></a>修改HelloWorld/settings.py</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Application definition</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;SimpleTodo&apos;, </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">#配置mysql数据库</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改HelloWorld-urls-py"><a href="#修改HelloWorld-urls-py" class="headerlink" title="修改HelloWorld/urls.py"></a>修改HelloWorld/urls.py</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, include</span><br><span class="line">from django.conf.urls import *</span><br><span class="line">from . import view</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;admin/&apos;, admin.site.urls),</span><br><span class="line">    path(r&apos;todolist&apos;,include(&apos;SimpleTodo.urls&apos;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="todolist搭建"><a href="#todolist搭建" class="headerlink" title="todolist搭建"></a>todolist搭建</h1><h2 id="Model层"><a href="#Model层" class="headerlink" title="Model层"></a>Model层</h2><ol><li><p>修改SimpleTodo/models.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line">class Todo(models.Model):</span><br><span class="line">    user = models.ForeignKey(User, on_delete=models.CASCADE,)</span><br><span class="line">    todo = models.CharField(max_length=50)</span><br><span class="line">    flag = models.CharField(max_length=2, default=&apos;1&apos;)</span><br><span class="line">    priority = models.CharField(max_length=2, default=&apos;0&apos;)</span><br><span class="line">    pubtime = models.DateTimeField(auto_now_add=True)</span><br><span class="line"></span><br><span class="line">    def __unicode__(self):</span><br><span class="line">        return u&apos;%d %s %s&apos;%(self.id, self.todo, self.flag)</span><br><span class="line"></span><br><span class="line">    class Meta: </span><br><span class="line">        ordering = [&apos;priority&apos;, &apos;pubtime&apos;]</span><br></pre></td></tr></table></figure></li><li><p>数据库迁移，命令行操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#生成迁移文件</span><br><span class="line">python manage.py makemigrations</span><br><span class="line"></span><br><span class="line">#迁移数据库</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></li></ol><h2 id="View层"><a href="#View层" class="headerlink" title="View层"></a>View层</h2><ol><li>修改SimpleTodo/views.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from django.http import HttpResponseRedirect</span><br><span class="line">from django.template import RequestContext</span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line">from django.http import Http404</span><br><span class="line">from SimpleTodo.models import Todo</span><br><span class="line"># Create your views here.</span><br><span class="line"></span><br><span class="line"># 获取todo列表</span><br><span class="line">def todolist(request):</span><br><span class="line">    todolist = Todo.objects.filter(flag=1)</span><br><span class="line">    finishtodos = Todo.objects.filter(flag=0)</span><br><span class="line">    return render(request, &apos;simpleTodo.html&apos;,</span><br><span class="line">                  &#123;&apos;todolist&apos;: todolist, &apos;finishtodos&apos;: finishtodos&#125;,)</span><br><span class="line"></span><br><span class="line"># 完成todo</span><br><span class="line">def todofinish(request):</span><br><span class="line">    id = request.GET.get(&apos;id&apos;,&apos;&apos;)</span><br><span class="line">    if id == &apos;&apos;:</span><br><span class="line">        return HttpResponseRedirect(&apos;/todolist&apos;)</span><br><span class="line"></span><br><span class="line">    todo = Todo.objects.get(id=id)</span><br><span class="line">    if todo.flag == &apos;1&apos;:</span><br><span class="line">        todo.flag = &apos;0&apos;</span><br><span class="line">        todo.save()</span><br><span class="line">    return HttpResponseRedirect(&apos;/todolist&apos;)</span><br><span class="line">    # todolist = Todo.objects.filter(flag=1)</span><br><span class="line">    # return render(request, &apos;simpleTodo.html&apos;, &#123;&apos;todolist&apos;: todolist&#125;)</span><br><span class="line"></span><br><span class="line"># 更改todo状态</span><br><span class="line">def todoback(request):</span><br><span class="line">    </span><br><span class="line">    id = request.GET.get(&apos;id&apos;,&apos;&apos;)</span><br><span class="line">    if id == &apos;&apos;:</span><br><span class="line">        return HttpResponseRedirect(&apos;/todolist&apos;)</span><br><span class="line"></span><br><span class="line">    todo = Todo.objects.get(id=id)</span><br><span class="line">    if todo.flag == &apos;0&apos;:</span><br><span class="line">        todo.flag = &apos;1&apos;</span><br><span class="line">        todo.save()</span><br><span class="line">    return HttpResponseRedirect(&apos;/todolist&apos;)</span><br><span class="line"></span><br><span class="line"># 添加todo</span><br><span class="line">def todoadd(request):</span><br><span class="line">    if request.method == &apos;POST&apos;:</span><br><span class="line">        todoc = request.POST[&apos;todo&apos;]</span><br><span class="line">        priority = request.POST[&apos;priority&apos;]</span><br><span class="line">        user = User.objects.get(id=&apos;1&apos;)</span><br><span class="line">        todo = Todo(user=user, todo=todoc, priority=priority, flag=&apos;1&apos;)</span><br><span class="line">        todo.save()</span><br><span class="line">        todolist = Todo.objects.filter(flag=1)</span><br><span class="line">        finishtodos = Todo.objects.filter(flag=0)</span><br><span class="line">        return render(request, &apos;simpleTodo.html&apos;,</span><br><span class="line">                      &#123;&apos;todolist&apos;: todolist, &apos;finishtodos&apos;: finishtodos&#125;,)</span><br><span class="line">    else:</span><br><span class="line">        todolist = Todo.objects.filter(flag=1)</span><br><span class="line">        finishtodos = Todo.objects.filter(flag=0)</span><br><span class="line">        return render(request, &apos;simpleTodo.html&apos;,</span><br><span class="line">                      &#123;&apos;todolist&apos;: todolist, &apos;finishtodos&apos;: finishtodos&#125;,)</span><br><span class="line"></span><br><span class="line"># 删除todo</span><br><span class="line">def tododelete(request):</span><br><span class="line">    id = request.GET.get(&apos;id&apos;,&apos;&apos;)</span><br><span class="line">    if id == &apos;&apos;:</span><br><span class="line">        return HttpResponseRedirect(&apos;/todolist&apos;)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        todo = Todo.objects.get(id=id)</span><br><span class="line">    except Exception:</span><br><span class="line">        raise Http404</span><br><span class="line">    if todo:</span><br><span class="line">        todo.delete()</span><br><span class="line">        return HttpResponseRedirect(&apos;/todolist&apos;)</span><br><span class="line">    todolist = Todo.objects.filter(flag=1)</span><br><span class="line">    return render(request, &apos;simpleTodo.html&apos;, &#123;&apos;todolist&apos;: todolist&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="路由设置"><a href="#路由设置" class="headerlink" title="路由设置"></a>路由设置</h1><ol><li>修改SimpleTodo/urls.py<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path,  include</span><br><span class="line">from . import views</span><br><span class="line">from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(r&apos;&apos;, views.todolist, name=&apos;todolist&apos;),</span><br><span class="line">    url(r&apos;/add&apos;, views.todoadd, name=&apos;todoadd&apos;),</span><br><span class="line">    url(r&apos;/todofinish/&apos;, views.todofinish, name=&apos;finish&apos;),</span><br><span class="line">    url(r&apos;/tododelete/&apos;, views.tododelete, name=&apos;delete&apos;),</span><br><span class="line">    url(r&apos;/todoback/&apos;, views.todoback, name=&apos;back&apos;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><h1 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h1><p>使用Bootstrap，具体参考官方文档</p><ol><li><p>创建模板，设置templates/base.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;% block mainbody %&#125;</span><br><span class="line">&lt;p&gt;original&lt;/p&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>设置templates/simpleTodo.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;base.html&apos; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block mainbody %&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&apos;container&apos;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;To do &lt;span class=&quot;badge badge-dark&quot; style=&quot;cursor: pointer;&quot; data-toggle=&quot;modal&quot;</span><br><span class="line">            data-target=&quot;#exampleModal&quot;&gt;Add&lt;/span&gt;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Modal --&gt;</span><br><span class="line">    &lt;div class=&quot;modal fade&quot; id=&quot;exampleModal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;exampleModalLabel&quot;</span><br><span class="line">        aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;modal-header&quot;&gt;</span><br><span class="line">                    &lt;h5 class=&quot;modal-title&quot; id=&quot;exampleModalLabel&quot;&gt;Add a Card&lt;/h5&gt;</span><br><span class="line">                    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;</span><br><span class="line">                        &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;</span><br><span class="line">                    &lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;modal-body&quot;&gt;</span><br><span class="line">                    &lt;form action=&quot;/todolist/add&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">                        &#123;% csrf_token %&#125;</span><br><span class="line">                        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                            &lt;label for=&quot;exampleFormControlTextarea1&quot; name=&apos;todo&apos;&gt;To do&lt;/label&gt;</span><br><span class="line">                            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;exampleFormControlTextarea1&quot; name=&apos;todo&apos;&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                            &lt;label for=&quot;exampleInputPriority&quot;&gt;Priority&lt;/label&gt;</span><br><span class="line">                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;exampleInputPriority&quot; name=&apos;priority&apos;&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;div class=&quot;modal-footer&quot;&gt;</span><br><span class="line">                            &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-dismiss=&quot;modal&quot;&gt;Close&lt;/button&gt;</span><br><span class="line">                            &lt;input type=&quot;submit&quot; value=&apos;add&apos; class=&quot;btn btn-primary&quot;&gt;</span><br><span class="line">                            </span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/form&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div class=&apos;row row-cols-4&apos;&gt;</span><br><span class="line">        &#123;% for todo in todolist %&#125;</span><br><span class="line">        &lt;div class=&apos;col&apos;&gt;</span><br><span class="line">            &lt;div class=&quot;card&quot; style=&quot;width: 15rem; height:14rem;&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;h5 class=&quot;card-title&quot;&gt;&#123;&#123;todo.pubtime&#125;&#125;&lt;/h5&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;&#123;&#123;todo.todo&#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;a href=&quot;todolist/todofinish/?id=&#123;&#123;todo.id&#125;&#125;&quot; class=&quot;btn btn-outline-success&quot;&gt;Finish&lt;/a&gt;</span><br><span class="line">                    &lt;a href=&quot;todolist/tododelete/?id=&#123;&#123;todo.id&#125;&#125;&quot; class=&quot;btn btn-outline-danger&quot;&gt;Delete&lt;/a&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;h3&gt;Finished&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&apos;row row-cols-4&apos;&gt;</span><br><span class="line">        &#123;% for todo in finishtodos %&#125;</span><br><span class="line">        &lt;div class=&apos;col&apos;&gt;</span><br><span class="line">            &lt;div class=&quot;card&quot; style=&quot;width: 15rem; height:14rem;&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">                    &lt;h5 class=&quot;card-title&quot;&gt;&#123;&#123;todo.pubtime&#125;&#125;&lt;/h5&gt;</span><br><span class="line">                    &lt;p class=&quot;card-text&quot;&gt;&#123;&#123;todo.todo&#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;a href=&quot;todolist/todoback/?id=&#123;&#123;todo.id&#125;&#125;&quot; class=&quot;btn btn-outline-success&quot;&gt;Recover&lt;/a&gt;</span><br><span class="line">                    &lt;a href=&quot;todolist/tododelete/?id=&#123;&#123;todo.id&#125;&#125;&quot; class=&quot;btn btn-outline-danger&quot;&gt;Delete&lt;/a&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><p><a href="https://blog.csdn.net/hcx25909/article/details/24251427?utm_source=app" target="_blank" rel="noopener">https://blog.csdn.net/hcx25909/article/details/24251427?utm_source=app</a></p></li><li><p>菜鸟教程</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本案例使用Django框架创建了一个todolist应用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;todo01.png&quot; alt=&quot;效果0&quot;&gt;&lt;br&gt;&lt;img src=&quot;todo02.png&quot; alt=&quot;效果1&quot;&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;虚拟环境使用</summary>
      
    
    
    
    <category term="Django" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/Django/"/>
    
    
    <category term="Django" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>R语言入门03</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2020/02/27/2020-03-04-rstudy03/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2020/02/27/2020-03-04-rstudy03/</id>
    <published>2020-02-27T04:12:26.000Z</published>
    <updated>2020-03-06T01:53:01.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#多元素向量</span><br><span class="line">v= 5:13</span><br><span class="line">print(v)</span><br><span class="line"></span><br><span class="line">v = 1.6:12.6</span><br><span class="line">print(v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v = 1.3:8.8</span><br><span class="line">print(v)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#sequence序列运算符</span><br><span class="line"></span><br><span class="line">print(seq(5,9, by=0.4))</span><br><span class="line"></span><br><span class="line">#C()运算符 一个为字符则全转为字符</span><br><span class="line">s = c(&apos;apple&apos;,&apos;red&apos;,3)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#访问向量元素</span><br><span class="line"></span><br><span class="line">t = c(&apos;a&apos;,&apos;c&apos;,&apos;d&apos;,&apos;f&apos;,&apos;g&apos;)</span><br><span class="line">u = t[c(1,3,5)]</span><br><span class="line">print(u)</span><br><span class="line"></span><br><span class="line">v = t[c(TRUE,TRUE,FALSE,TRUE,TRUE)]</span><br><span class="line">print(v)</span><br><span class="line"></span><br><span class="line">y = t[c(1,2,1,1,1)]</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">v = t[c(-2, -3)]</span><br><span class="line">print(v)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#向量运算 略</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#向量元素回收</span><br><span class="line">v1 = c(3,8,4,5,9,11)</span><br><span class="line">v2 = c(4,11)</span><br><span class="line"></span><br><span class="line">#v2 填充为 c(4,11,4,11,4,11)</span><br><span class="line">add.result = v1+v2</span><br><span class="line">print(add.result)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#向量元素排序</span><br><span class="line">v = c(2,1,4,9,5,-10)</span><br><span class="line">sort.result = sort(v)</span><br><span class="line">print(sort.result)</span><br><span class="line">resort.result = sort(v, decreasing = TRUE)</span><br><span class="line">print(resort.result)</span><br><span class="line"></span><br><span class="line"># Sorting character vectors.</span><br><span class="line">v &lt;- c(&quot;Red&quot;,&quot;Blue&quot;,&quot;yellow&quot;,&quot;violet&quot;)</span><br><span class="line">sort.result &lt;- sort(v)</span><br><span class="line">print(sort.result)</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list_data = list(&apos;Red&apos;,&apos;Green&apos;,c(2,4,5),TRUE)</span><br><span class="line">print(list_data)</span><br><span class="line"></span><br><span class="line">#命名</span><br><span class="line">names(list_data) = c(&apos;color1&apos;,&apos;color2&apos;,&apos;vector&apos;,&apos;bool&apos;)</span><br><span class="line">print(list_data)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#访问列表元素</span><br><span class="line">print(list_data[1])</span><br><span class="line"></span><br><span class="line">print(list_data$vector)</span><br><span class="line"></span><br><span class="line">#添加删除更新列表元素</span><br><span class="line">list_data[5] = &apos;new element&apos;</span><br><span class="line">print(list_data[5])</span><br><span class="line"></span><br><span class="line">list_data[5] = NULL</span><br><span class="line">print(list_data[5])</span><br><span class="line"></span><br><span class="line">list_data[3] = &apos;update ele&apos;</span><br><span class="line">print(list_data[3])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#合并列表</span><br><span class="line">list1 = list(1,2,3)</span><br><span class="line">list2 = list(&apos;Sun&apos;,&apos;Mon&apos;,&apos;Tue&apos;)</span><br><span class="line"></span><br><span class="line">merged.list = c(list1, list2)</span><br><span class="line"></span><br><span class="line">print(merged.list)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#将列表转化为向量</span><br><span class="line">list1 = list(1:5)</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line">list2 = list(10:14)</span><br><span class="line">print(list2)</span><br><span class="line"></span><br><span class="line">v1 = unlist(list1)</span><br><span class="line">v2 = unlist(list2)</span><br><span class="line"></span><br><span class="line">print(v1)</span><br><span class="line">print(v2)</span><br><span class="line"></span><br><span class="line">result = v1+v2</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">M = matrix(c(3:14),nrow = 4, byrow=TRUE)</span><br><span class="line">print(M)</span><br><span class="line"></span><br><span class="line">rownames = c(&apos;r1&apos;,&apos;r2&apos;,&apos;r3&apos;,&apos;r4&apos;)</span><br><span class="line">colnames = c(&apos;c1&apos;,&apos;c2&apos;,&apos;c3&apos;)</span><br><span class="line"></span><br><span class="line">p = matrix(c(3:14), nrow=4, byrow = TRUE, dimnames = list(rownames,colnames))</span><br><span class="line"></span><br><span class="line">print(p)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#访问元素</span><br><span class="line">print(p[1,3])</span><br><span class="line"></span><br><span class="line">print(p[2,])</span><br><span class="line"></span><br><span class="line">print(p[,3])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#加减乘除法 略</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Create two vectors of different lengths.</span><br><span class="line">vector1 &lt;- c(5,9,3)</span><br><span class="line">vector2 &lt;- c(10,11,12,13,14,15)</span><br><span class="line"></span><br><span class="line"># Take these vectors as input to the array.</span><br><span class="line">result &lt;- array(c(vector1,vector2),dim = c(3,3,2))</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#加减乘除访问元素 略</span><br><span class="line"></span><br><span class="line"># 跨矩阵元素的计算</span><br><span class="line"># apply(x,margin,func)</span><br><span class="line"># x:数组</span><br><span class="line"># margin: 以第几维度为单位操作</span><br><span class="line"># func: 所使用的函数</span><br><span class="line">vector1 &lt;- c(5,9,3)</span><br><span class="line">vector2 &lt;- c(10,11,12,13,14,15) </span><br><span class="line">new.array &lt;- array(c(vector1,vector2),dim = c(3,3,2))</span><br><span class="line">print(new.array)</span><br><span class="line"></span><br><span class="line">result &lt;- apply(new.array, c(3), sum)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h2 id="dataframe"><a href="#dataframe" class="headerlink" title="dataframe"></a>dataframe</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Create the data frame.</span><br><span class="line">emp.data &lt;- data.frame(</span><br><span class="line">   emp_id = c (1:5), </span><br><span class="line">   emp_name = c(&quot;Rick&quot;,&quot;Dan&quot;,&quot;Michelle&quot;,&quot;Ryan&quot;,&quot;Gary&quot;),</span><br><span class="line">   salary = c(623.3,515.2,611.0,729.0,843.25), </span><br><span class="line">   </span><br><span class="line">   start_date = as.Date(c(&quot;2012-01-01&quot;, &quot;2013-09-23&quot;, &quot;2014-11-15&quot;, &quot;2014-05-11&quot;,</span><br><span class="line">      &quot;2015-03-27&quot;)),</span><br><span class="line">   stringsAsFactors = FALSE</span><br><span class="line">)</span><br><span class="line"># Print the data frame.</span><br><span class="line">print(emp.data)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#获取dataframe的结构</span><br><span class="line">str(emp.data) </span><br><span class="line"></span><br><span class="line">#获取数据摘要</span><br><span class="line">print(summary(emp.data))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#提取两列</span><br><span class="line">result = data.frame(emp.data$emp_name, emp.data$salary)</span><br><span class="line"></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#提取两行</span><br><span class="line">result &lt;- emp.data[1:2,]</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">#提取第三行和五行的第二和四列</span><br><span class="line">result &lt;- emp.data[c(3,5),c(2,4)]</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#添加列</span><br><span class="line">emp.data$dept &lt;- c(&quot;IT&quot;,&quot;Operations&quot;,&quot;IT&quot;,&quot;HR&quot;,&quot;Finance&quot;)</span><br><span class="line">v &lt;- emp.data</span><br><span class="line">print(v)</span><br><span class="line"></span><br><span class="line">##添加行</span><br><span class="line">emp.newdata = data.frame(</span><br><span class="line">   emp_id = c (6:8), </span><br><span class="line">   emp_name = c(&quot;Rasmi&quot;,&quot;Pranab&quot;,&quot;Tusar&quot;),</span><br><span class="line">   salary = c(578.0,722.5,632.8), </span><br><span class="line">   start_date =</span><br><span class="line">     as.Date(c(&quot;2013-05-21&quot;,&quot;2013-07-30&quot;,&quot;2014-06-17&quot;)),</span><br><span class="line">   dept = c(&quot;IT&quot;,&quot;Operations&quot;,&quot;Fianance&quot;),</span><br><span class="line">   stringsAsFactors = FALSE</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">emp.finaldata = rbind(emp.data, emp.newdata)</span><br><span class="line">print(emp.finaldata)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;向量&quot;&gt;&lt;a href=&quot;#向量&quot; class=&quot;headerlink&quot; title=&quot;向量&quot;&gt;&lt;/a&gt;向量&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    <category term="R" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/R/"/>
    
    
    <category term="R" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>R语言入门02</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2020/02/27/rstudy02/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2020/02/27/rstudy02/</id>
    <published>2020-02-27T04:12:26.000Z</published>
    <updated>2020-02-28T03:23:27.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R语言入门2"><a href="#R语言入门2" class="headerlink" title="R语言入门2"></a>R语言入门2</h1><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">v &lt;- c(&apos;hello&apos;,&apos;loop&apos;)</span><br><span class="line">cnt &lt;- 2</span><br><span class="line"></span><br><span class="line">#repeat</span><br><span class="line">repeat&#123;</span><br><span class="line">  print(v)</span><br><span class="line">  cnt &lt;- cnt + 1</span><br><span class="line">  if(cnt&gt;5)&#123;</span><br><span class="line">    break</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#while</span><br><span class="line">while(cnt&lt;7)&#123;</span><br><span class="line">  print(v)</span><br><span class="line">  cnt = cnt + 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#for</span><br><span class="line">v = LETTERS[1:4]</span><br><span class="line">for(i in v)&#123;</span><br><span class="line">  print(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#next</span><br><span class="line">v = LETTERS[1:6]</span><br><span class="line">for (i in v)&#123;</span><br><span class="line">  </span><br><span class="line">  if(i==&apos;D&apos;)&#123;</span><br><span class="line">    next</span><br><span class="line">  &#125;</span><br><span class="line">  print(i)</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据重塑"><a href="#数据重塑" class="headerlink" title="数据重塑"></a>数据重塑</h2><h3 id="在dataframe中加入行和列"><a href="#在dataframe中加入行和列" class="headerlink" title="在dataframe中加入行和列"></a>在dataframe中加入行和列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#cbind()连接多个向量创建数据帧</span><br><span class="line">#rbind()合并两个数据帧</span><br><span class="line">city = c(&apos;Beijing&apos;,&apos;Shanghai&apos;,&apos;Guangzhou&apos;)</span><br><span class="line">province = c(&apos;Beijing&apos;, &apos;Shanghai&apos;, &apos;Guangdong&apos;)</span><br><span class="line">GDP = c(&apos;2000&apos;,&apos;3000&apos;,&apos;2500&apos;)</span><br><span class="line"></span><br><span class="line">cities = cbind(city, province, GDP)</span><br><span class="line"></span><br><span class="line">cat(&apos;# # # The First data Frame&apos;)</span><br><span class="line"></span><br><span class="line">print(cities)</span><br><span class="line"></span><br><span class="line">new.citi = data.frame(</span><br><span class="line">  city = c(&apos;Xian&apos;,&apos;Nanjing&apos;),</span><br><span class="line">  province = c(&apos;Shanxi&apos;, &apos;Jiangsu&apos;),</span><br><span class="line">  GDP = c(&apos;1500&apos;,&apos;1900&apos;),</span><br><span class="line">  stringsAsFactors =  FALSE</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cat(&apos;# # # The Second data Frame&apos;)</span><br><span class="line"></span><br><span class="line">print(new.citi)</span><br><span class="line"></span><br><span class="line">all.cities = rbind(cities, new.citi)</span><br><span class="line"></span><br><span class="line">cat(&apos;# # # The combined data Frame&apos;)</span><br><span class="line"></span><br><span class="line">print(all.cities)</span><br></pre></td></tr></table></figure><h3 id="合并数据帧"><a href="#合并数据帧" class="headerlink" title="合并数据帧"></a>合并数据帧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#merge() 合并， 数据帧必须具有相同的列名称</span><br><span class="line">library(MASS)</span><br><span class="line">merged.Pima = merge(x = Pima.te, y = Pima.tr, </span><br><span class="line">                    by.x = c(&apos;bp&apos;, &apos;bmi&apos;),</span><br><span class="line">                    by.y = c(&apos;bp&apos;, &apos;bmi&apos;)</span><br><span class="line">                    )</span><br><span class="line">print(merged.Pima)</span><br></pre></td></tr></table></figure><h3 id="melt-拆分数据和cast-数据重构"><a href="#melt-拆分数据和cast-数据重构" class="headerlink" title="melt()拆分数据和cast()数据重构"></a>melt()拆分数据和cast()数据重构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">print(ships)</span><br><span class="line"></span><br><span class="line">#melt  拆分，把除了选中列以外的列转化为多行展示</span><br><span class="line">library(reshape2)</span><br><span class="line">molten.ships = melt(ships, id=c(&apos;type&apos;, &apos;year&apos;))</span><br><span class="line"></span><br><span class="line">#install.packages(&quot;reshape2&quot;)</span><br><span class="line">print(molten.ships)</span><br><span class="line"></span><br><span class="line">#cast</span><br><span class="line">#每年每种类型的船的总和 选中变量之外的变量进行sum操作</span><br><span class="line">#acast,dcast的区别在于输出结果。acast 输出结果为vector/matrix/array，dcast 输出结果为data.frame。</span><br><span class="line"></span><br><span class="line">recasted.ships = dcast(molten.ships, type+year~variable,sum)</span><br><span class="line">print(recasted.ships)</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">print(seq(32,44))</span><br><span class="line">print(mean(24:99))</span><br><span class="line">print(sum(1:10))</span><br><span class="line"></span><br><span class="line">#自定义函数</span><br><span class="line">new.function = function(a=1)&#123;</span><br><span class="line">  for(i in 1:a)&#123;</span><br><span class="line">    b = i^2</span><br><span class="line">    print(b)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">new.function(3)</span><br><span class="line">new.function()</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#paste()连接字符串</span><br><span class="line"></span><br><span class="line">a = &apos;Hello&apos;</span><br><span class="line">b = &apos;How&apos;</span><br><span class="line">c = &apos;are you?&apos;</span><br><span class="line"></span><br><span class="line">print(paste(a,b,c))</span><br><span class="line">print(paste(a,b,c, sep = &apos;-&apos;))</span><br><span class="line">print(paste(a,b,c,sep = &apos;&apos;,collapse = &apos;&apos;))</span><br><span class="line"></span><br><span class="line">#format()</span><br><span class="line">print(format(2.71828, digits=3)) #显示的总位数</span><br><span class="line">print(format(c(3.1415926535,2.71828), scientific = TRUE)) #科学计数法</span><br><span class="line">print(format(c(3.1415926535,2.71828), nsmall=5)) #小数点右边最小位数</span><br><span class="line">result = format(6) #返回一个文本型</span><br><span class="line">print(result)</span><br><span class="line">result = format(13.8, width=6) #设置宽度</span><br><span class="line">print(result)</span><br><span class="line">result = format(&apos;Hello&apos;, width=8, justify = &apos;l&apos;) #居左</span><br><span class="line">print(result)</span><br><span class="line">result = format(&apos;Hello&apos;, width=8, justify = &apos;c&apos;)#justify位置居中</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">#计算字符串中的字符数</span><br><span class="line">x = &apos;天堂电影院&apos;</span><br><span class="line">nchar(x)</span><br><span class="line"></span><br><span class="line">#大小写</span><br><span class="line">y = &apos;administrator&apos;</span><br><span class="line">toupper(y)</span><br><span class="line">tolower(y)</span><br><span class="line"></span><br><span class="line">#substring提取</span><br><span class="line">result = substring(y, 2,10) #输入，第一个字符位置，最后一个字符位置</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.w3cschool.cn/r/r_overview.html" title="W3Cschool-R语言 教程" target="_blank" rel="noopener">https://www.w3cschool.cn/r/r_overview.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;R语言入门2&quot;&gt;&lt;a href=&quot;#R语言入门2&quot; class=&quot;headerlink&quot; title=&quot;R语言入门2&quot;&gt;&lt;/a&gt;R语言入门2&lt;/h1&gt;&lt;h2 id=&quot;循环&quot;&gt;&lt;a href=&quot;#循环&quot; class=&quot;headerlink&quot; title=&quot;循环&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="R" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/R/"/>
    
    
    <category term="R" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>R语言入门01</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2020/02/26/rstudy01/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2020/02/26/rstudy01/</id>
    <published>2020-02-26T04:12:26.000Z</published>
    <updated>2020-02-26T04:20:52.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R语言入门"><a href="#R语言入门" class="headerlink" title="R语言入门"></a>R语言入门</h1><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;Hello World&apos;)</span><br></pre></td></tr></table></figure><h3 id="安装所需要的软件包"><a href="#安装所需要的软件包" class="headerlink" title="安装所需要的软件包"></a>安装所需要的软件包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install.packages(&apos;plotrix&apos;)</span><br></pre></td></tr></table></figure><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mystring = &quot;Hello, World!&quot;</span><br><span class="line">print(mystring)</span><br></pre></td></tr></table></figure><h3 id="不支持多行注释下的一种多行注释方法"><a href="#不支持多行注释下的一种多行注释方法" class="headerlink" title="不支持多行注释下的一种多行注释方法"></a>不支持多行注释下的一种多行注释方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(FALSE) &#123;</span><br><span class="line">  &quot;This is a demo for multi-line comments and it should be put inside either a single</span><br><span class="line">      OR double quote&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#向量Vector</span><br><span class="line">human = c(&apos;head&apos;,&apos;hand&apos;,&apos;foot&apos;)</span><br><span class="line">print(human)</span><br><span class="line">print(class(human))</span><br><span class="line"></span><br><span class="line">#列表List</span><br><span class="line">list = list(c(2,5,3),21,3,sin)</span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line">#Matrix矩阵 二维矩形数据集</span><br><span class="line">M = matrix(c(&apos;a&apos;,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;),</span><br><span class="line">           nrow=2,</span><br><span class="line">           ncol=3,</span><br><span class="line">           byrow=TRUE)</span><br><span class="line">print(M)</span><br><span class="line"></span><br><span class="line">#Arrays数组 可以多维</span><br><span class="line">a = array(c(&apos;green&apos;, &apos;yellow&apos;), dim=c(3,3,2))</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">#Factors因子</span><br><span class="line">colors = c(&apos;green&apos;,&apos;yellow&apos;,&apos;red&apos;,&apos;red&apos;,&apos;red&apos;)</span><br><span class="line">factor_colors = factor(colors)</span><br><span class="line">print(factor_colors)</span><br><span class="line">print(nlevels(factor_colors))</span><br><span class="line"></span><br><span class="line">#DataFrame</span><br><span class="line">BMI =data.frame(</span><br><span class="line">  gender = c(&quot;Male&quot;, &quot;Male&quot;,&quot;Female&quot;), </span><br><span class="line">  height = c(152, 171.5, 165), </span><br><span class="line">  weight = c(81,93, 78),</span><br><span class="line">  Age = c(42,38,26)</span><br><span class="line">)</span><br><span class="line">print(BMI)</span><br></pre></td></tr></table></figure><h3 id="变量使用"><a href="#变量使用" class="headerlink" title="变量使用"></a>变量使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#cat()函数 组合成连续打印输出</span><br><span class="line">var.1 = c(0,1,2)</span><br><span class="line">var.2 = c(&quot;you&quot;,&quot;are&quot;,&quot;good&quot;)</span><br><span class="line">cat(&quot;var.1 is&quot;,var.1, &quot;.&quot;)</span><br><span class="line">print(var)</span><br><span class="line"></span><br><span class="line">#变量数据类型</span><br><span class="line">list_0 = list(1,&apos;google&apos;,&apos;page&apos;)</span><br><span class="line">class(list_0)</span><br><span class="line"></span><br><span class="line">#查找变量</span><br><span class="line">print(ls())</span><br><span class="line">print(ls(pattern = &apos;var&apos;))</span><br><span class="line">print(ls(all.names = TRUE))</span><br><span class="line"></span><br><span class="line">#删除变量</span><br><span class="line">rm(var.2)</span><br><span class="line">print(var.2)</span><br><span class="line"></span><br><span class="line">#删除所有变量</span><br><span class="line">rm(list=ls())</span><br><span class="line">print(ls())</span><br><span class="line"></span><br><span class="line">#运算符</span><br><span class="line">v1 = 8</span><br><span class="line">t = 1:10</span><br><span class="line">print(v1 %in% t)</span><br></pre></td></tr></table></figure><h3 id="R语言的包"><a href="#R语言的包" class="headerlink" title="R语言的包"></a>R语言的包</h3><pre><code>#获取包含R语言的包的位置.libPaths() #获取已经安装的软件包列表library() #获取当前R环境中价值的所有包search() #安装一个新的软件包install.packages(&quot;XML&quot;)#手动安装#install.packages(&quot;E:/XML_3.98-1.3.zip&quot;, repos = NULL, type = &quot;source&quot;)#加载包#library(&quot;package Name&quot;, lib.loc = &quot;path to library&quot;)</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.w3cschool.cn/r/r_overview.html" title="W3Cschool-R语言 教程" target="_blank" rel="noopener">https://www.w3cschool.cn/r/r_overview.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;R语言入门&quot;&gt;&lt;a href=&quot;#R语言入门&quot; class=&quot;headerlink&quot; title=&quot;R语言入门&quot;&gt;&lt;/a&gt;R语言入门&lt;/h1&gt;&lt;h2 id=&quot;Start&quot;&gt;&lt;a href=&quot;#Start&quot; class=&quot;headerlink&quot; title=&quot;Sta</summary>
      
    
    
    
    <category term="R" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/R/"/>
    
    
    <category term="R" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>markdown中显示jupyter笔记本的方法</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2020/02/20/nbviewer/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2020/02/20/nbviewer/</id>
    <published>2020-02-20T08:08:26.000Z</published>
    <updated>2020-02-20T08:09:29.889Z</updated>
    
    <content type="html"><![CDATA[<p>因为jupyter非常的简洁美观，一般都把code放在.ipynb文件中，但是.ipynb好像直接导出为markdown会出现大片空白，操作繁琐且不美观。</p><p>但是jupyter好像提供了一个在线分享notebook的方案，就是通过nbviewer这个东西。</p><p>方法简单：</p><ol><li>上传.ipynb文件到github</li><li>把github的文件路径放到nbviewer里</li><li>因为markdown支持html,可以把生成的链接的放在markdown中上传</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;https://nbviewer.jupyter.org/github/MENGmemory/sklearn_study/blob/master/preprocessing.ipynb&quot; width=&quot;570&quot; height=&quot;2000&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p>但是还是不想传，太懒。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为jupyter非常的简洁美观，一般都把code放在.ipynb文件中，但是.ipynb好像直接导出为markdown会出现大片空白，操作繁琐且不美观。&lt;/p&gt;
&lt;p&gt;但是jupyter好像提供了一个在线分享notebook的方案，就是通过nbviewer这个东西。&lt;/p</summary>
      
    
    
    
    <category term="jupyter" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/jupyter/"/>
    
    
    <category term="jupyter" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/jupyter/"/>
    
  </entry>
  
  <entry>
    <title>sklearn特征工程01</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2020/01/10/preprocessing/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2020/01/10/preprocessing/</id>
    <published>2020-01-10T07:20:26.000Z</published>
    <updated>2020-02-17T05:45:09.250Z</updated>
    
    <content type="html"><![CDATA[<iframe src="https://nbviewer.jupyter.org/github/MENGmemory/sklearn_study/blob/master/preprocessing.ipynb" width="570" height="2000"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe src=&quot;https://nbviewer.jupyter.org/github/MENGmemory/sklearn_study/blob/master/preprocessing.ipynb&quot; width=&quot;570&quot; height=&quot;2000&quot;&gt;&lt;/ifram</summary>
      
    
    
    
    <category term="python" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/python/"/>
    
    
    <category term="sklearn" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/sklearn/"/>
    
    <category term="python" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>pandas引入、选择数据、赋值与操作</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/08/pandas/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/08/pandas/</id>
    <published>2019-11-08T06:43:16.000Z</published>
    <updated>2019-11-08T06:43:16.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础引入"><a href="#基础引入" class="headerlink" title="基础引入"></a>基础引入</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">irisdata = pd.read_csv(<span class="string">'iris.txt'</span>, header=<span class="literal">None</span>,  encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">irisdata[:<span class="number">30</span>]</span><br><span class="line"><span class="comment"># help(irisdata)</span></span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>0</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>Sepal.Length “Sepal.Width” “Petal.Length” “Pet…</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>1 5.1 3.5 1.4 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2 4.9 3 1.4 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>3 4.7 3.2 1.3 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>4 4.6 3.1 1.5 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>5 5 3.6 1.4 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>6 5.4 3.9 1.7 0.4 “setosa”</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>7 4.6 3.4 1.4 0.3 “setosa”</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>8 5 3.4 1.5 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>9</th><br>      <td>9 4.4 2.9 1.4 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>10</th><br>      <td>10 4.9 3.1 1.5 0.1 “setosa”</td><br>    </tr><br>    <tr><br>      <th>11</th><br>      <td>11 5.4 3.7 1.5 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>12</th><br>      <td>12 4.8 3.4 1.6 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>13</th><br>      <td>13 4.8 3 1.4 0.1 “setosa”</td><br>    </tr><br>    <tr><br>      <th>14</th><br>      <td>14 4.3 3 1.1 0.1 “setosa”</td><br>    </tr><br>    <tr><br>      <th>15</th><br>      <td>15 5.8 4 1.2 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>16</th><br>      <td>16 5.7 4.4 1.5 0.4 “setosa”</td><br>    </tr><br>    <tr><br>      <th>17</th><br>      <td>17 5.4 3.9 1.3 0.4 “setosa”</td><br>    </tr><br>    <tr><br>      <th>18</th><br>      <td>18 5.1 3.5 1.4 0.3 “setosa”</td><br>    </tr><br>    <tr><br>      <th>19</th><br>      <td>19 5.7 3.8 1.7 0.3 “setosa”</td><br>    </tr><br>    <tr><br>      <th>20</th><br>      <td>20 5.1 3.8 1.5 0.3 “setosa”</td><br>    </tr><br>    <tr><br>      <th>21</th><br>      <td>21 5.4 3.4 1.7 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>22</th><br>      <td>22 5.1 3.7 1.5 0.4 “setosa”</td><br>    </tr><br>    <tr><br>      <th>23</th><br>      <td>23 4.6 3.6 1 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>24</th><br>      <td>24 5.1 3.3 1.7 0.5 “setosa”</td><br>    </tr><br>    <tr><br>      <th>25</th><br>      <td>25 4.8 3.4 1.9 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>26</th><br>      <td>26 5 3 1.6 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>27</th><br>      <td>27 5 3.4 1.6 0.4 “setosa”</td><br>    </tr><br>    <tr><br>      <th>28</th><br>      <td>28 5.2 3.5 1.5 0.2 “setosa”</td><br>    </tr><br>    <tr><br>      <th>29</th><br>      <td>29 5.2 3.4 1.4 0.2 “setosa”</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sl = pd.Series([<span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">-2</span>]) <span class="comment">#pandas基于numpy，索引为默认值</span></span><br><span class="line">print(sl)</span><br></pre></td></tr></table></figure><pre><code>0    41    72    93   -2dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sl.values</span><br></pre></td></tr></table></figure><pre><code>array([ 4,  7,  9, -2])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sl.index</span><br></pre></td></tr></table></figure><pre><code>RangeIndex(start=0, stop=4, step=1)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2 = pd.Series([<span class="number">2.0</span>, <span class="number">2.1</span>, <span class="number">3.3</span>, <span class="number">3.1</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]) <span class="comment"># 自定义索引</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2</span><br></pre></td></tr></table></figure><pre><code>a    2.0b    2.1c    3.3d    3.1dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2[<span class="string">'a'</span>]</span><br></pre></td></tr></table></figure><pre><code>2.0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2[[<span class="string">'a'</span>, <span class="string">'b'</span>,<span class="string">'d'</span>]]</span><br></pre></td></tr></table></figure><pre><code>a    2.0b    2.1d    3.1dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'b'</span> <span class="keyword">in</span> s2</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'e'</span> <span class="keyword">in</span> s2</span><br></pre></td></tr></table></figure><pre><code>False</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Series可以看做一个定长的字典</span></span><br><span class="line">dic1 = &#123;<span class="string">'apple'</span>:<span class="number">1</span>, <span class="string">'peer'</span>:<span class="number">2</span>, <span class="string">'pen'</span>:<span class="number">5</span>&#125;</span><br><span class="line">s3 = pd.Series(dic1)</span><br><span class="line">s3</span><br></pre></td></tr></table></figure><pre><code>apple    1peer     2pen      5dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">'year'</span>:[<span class="number">2014</span>,<span class="number">2015</span>,<span class="number">2016</span>],</span><br><span class="line">       <span class="string">'income'</span>:[<span class="number">1000</span>, <span class="number">2000</span>, <span class="number">2400</span>],</span><br><span class="line">       <span class="string">'output'</span>:[<span class="number">200</span>, <span class="number">400</span>, <span class="number">900</span>]&#125;</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(data)</span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>year</th><br>      <th>income</th><br>      <th>output</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2014</td><br>      <td>1000</td><br>      <td>200</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2015</td><br>      <td>2000</td><br>      <td>400</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2016</td><br>      <td>2400</td><br>      <td>900</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>0</th><br>      <th>1</th><br>      <th>2</th><br>      <th>3</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>8</td><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)), index=[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>], columns=[<span class="number">2</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>2</th><br>      <th>33</th><br>      <th>44</th><br>      <th>55</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>a</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>c</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>b</th><br>      <td>8</td><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.columns <span class="comment">#列属性</span></span><br></pre></td></tr></table></figure><pre><code>Index([&apos;year&apos;, &apos;income&apos;, &apos;output&apos;], dtype=&apos;object&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.index</span><br></pre></td></tr></table></figure><pre><code>RangeIndex(start=0, stop=3, step=1)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3.index</span><br></pre></td></tr></table></figure><pre><code>Index([&apos;a&apos;, &apos;c&apos;, &apos;b&apos;], dtype=&apos;object&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.values</span><br></pre></td></tr></table></figure><pre><code>array([[2014, 1000,  200],       [2015, 2000,  400],       [2016, 2400,  900]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.describe()</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>year</th><br>      <th>income</th><br>      <th>output</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>count</th><br>      <td>3.0</td><br>      <td>3.000000</td><br>      <td>3.000000</td><br>    </tr><br>    <tr><br>      <th>mean</th><br>      <td>2015.0</td><br>      <td>1800.000000</td><br>      <td>500.000000</td><br>    </tr><br>    <tr><br>      <th>std</th><br>      <td>1.0</td><br>      <td>721.110255</td><br>      <td>360.555128</td><br>    </tr><br>    <tr><br>      <th>min</th><br>      <td>2014.0</td><br>      <td>1000.000000</td><br>      <td>200.000000</td><br>    </tr><br>    <tr><br>      <th>25%</th><br>      <td>2014.5</td><br>      <td>1500.000000</td><br>      <td>300.000000</td><br>    </tr><br>    <tr><br>      <th>50%</th><br>      <td>2015.0</td><br>      <td>2000.000000</td><br>      <td>400.000000</td><br>    </tr><br>    <tr><br>      <th>75%</th><br>      <td>2015.5</td><br>      <td>2200.000000</td><br>      <td>650.000000</td><br>    </tr><br>    <tr><br>      <th>max</th><br>      <td>2016.0</td><br>      <td>2400.000000</td><br>      <td>900.000000</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.T</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>0</th><br>      <th>1</th><br>      <th>2</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>year</th><br>      <td>2014</td><br>      <td>2015</td><br>      <td>2016</td><br>    </tr><br>    <tr><br>      <th>income</th><br>      <td>1000</td><br>      <td>2000</td><br>      <td>2400</td><br>    </tr><br>    <tr><br>      <th>output</th><br>      <td>200</td><br>      <td>400</td><br>      <td>900</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3.sort_index(axis=<span class="number">1</span>) <span class="comment">#列排序</span></span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>2</th><br>      <th>33</th><br>      <th>44</th><br>      <th>55</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>a</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>c</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>b</th><br>      <td>8</td><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3.sort_index(axis=<span class="number">0</span>)<span class="comment">#行排序</span></span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>2</th><br>      <th>33</th><br>      <th>44</th><br>      <th>55</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>a</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>b</th><br>      <td>8</td><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>c</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3.sort_values(by=<span class="number">44</span>) <span class="comment">#按照某一列的值进行排序</span></span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>2</th><br>      <th>33</th><br>      <th>44</th><br>      <th>55</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>a</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>c</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>b</th><br>      <td>8</td><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>  </tbody><br></table><br></div><h1 id="选择数据"><a href="#选择数据" class="headerlink" title="选择数据"></a>选择数据</h1><h1 id="方法如下："><a href="#方法如下：" class="headerlink" title="方法如下："></a>方法如下：</h1><p>df.loc() 按标签名称定位 先行后列</p><p>df.iloc() 按位置定位  行、列</p><p>df.ix() 混合定位</p><p>df[df.A&gt;9] 条件定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dates = pd.date_range(<span class="string">'20170101'</span>, periods=<span class="number">6</span>) <span class="comment">#日期序列</span></span><br><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)), index=dates, columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>a</th><br>      <th>b</th><br>      <th>c</th><br>      <th>d</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2017-01-01</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>2017-01-02</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>2017-01-03</th><br>      <td>8</td><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>2017-01-04</th><br>      <td>12</td><br>      <td>13</td><br>      <td>14</td><br>      <td>15</td><br>    </tr><br>    <tr><br>      <th>2017-01-05</th><br>      <td>16</td><br>      <td>17</td><br>      <td>18</td><br>      <td>19</td><br>    </tr><br>    <tr><br>      <th>2017-01-06</th><br>      <td>20</td><br>      <td>21</td><br>      <td>22</td><br>      <td>23</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1[<span class="string">'a'</span>] <span class="comment">#将dataframe的列获取为一个series</span></span><br></pre></td></tr></table></figure><pre><code>2017-01-01     02017-01-02     42017-01-03     82017-01-04    122017-01-05    162017-01-06    20Freq: D, Name: a, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.a</span><br></pre></td></tr></table></figure><pre><code>2017-01-01     02017-01-02     42017-01-03     82017-01-04    122017-01-05    162017-01-06    20Freq: D, Name: a, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1[<span class="number">0</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>a</th><br>      <th>b</th><br>      <th>c</th><br>      <th>d</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2017-01-01</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>2017-01-02</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1[<span class="string">'20170102'</span>:<span class="string">'20170104'</span>]</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>a</th><br>      <th>b</th><br>      <th>c</th><br>      <th>d</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2017-01-02</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>2017-01-03</th><br>      <td>8</td><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>2017-01-04</th><br>      <td>12</td><br>      <td>13</td><br>      <td>14</td><br>      <td>15</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过标签选择数据</span></span><br><span class="line">df1.loc[<span class="string">'20170102'</span>]</span><br></pre></td></tr></table></figure><pre><code>a    4b    5c    6d    7Name: 2017-01-02 00:00:00, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.loc[<span class="string">'20170102'</span>, [<span class="string">'a'</span>,<span class="string">'c'</span>]] <span class="comment">#前面行索引名字 后面是列标签</span></span><br></pre></td></tr></table></figure><pre><code>a    4c    6Name: 2017-01-02 00:00:00, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.loc[:,[<span class="string">'a'</span>,<span class="string">'b'</span>]]</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>a</th><br>      <th>b</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2017-01-01</th><br>      <td>0</td><br>      <td>1</td><br>    </tr><br>    <tr><br>      <th>2017-01-02</th><br>      <td>4</td><br>      <td>5</td><br>    </tr><br>    <tr><br>      <th>2017-01-03</th><br>      <td>8</td><br>      <td>9</td><br>    </tr><br>    <tr><br>      <th>2017-01-04</th><br>      <td>12</td><br>      <td>13</td><br>    </tr><br>    <tr><br>      <th>2017-01-05</th><br>      <td>16</td><br>      <td>17</td><br>    </tr><br>    <tr><br>      <th>2017-01-06</th><br>      <td>20</td><br>      <td>21</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过位置选择数据</span></span><br><span class="line">df1.iloc[<span class="number">2</span>] <span class="comment">#第三行</span></span><br></pre></td></tr></table></figure><pre><code>a     8b     9c    10d    11Name: 2017-01-03 00:00:00, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.iloc[<span class="number">1</span>:<span class="number">3</span>, <span class="number">2</span>:<span class="number">4</span>] <span class="comment">#前面是行 后面是列</span></span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>c</th><br>      <th>d</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2017-01-02</th><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>2017-01-03</th><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>a</th><br>      <th>b</th><br>      <th>c</th><br>      <th>d</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2017-01-01</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>2017-01-02</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>2017-01-03</th><br>      <td>8</td><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>2017-01-04</th><br>      <td>12</td><br>      <td>13</td><br>      <td>14</td><br>      <td>15</td><br>    </tr><br>    <tr><br>      <th>2017-01-05</th><br>      <td>16</td><br>      <td>17</td><br>      <td>18</td><br>      <td>19</td><br>    </tr><br>    <tr><br>      <th>2017-01-06</th><br>      <td>20</td><br>      <td>21</td><br>      <td>22</td><br>      <td>23</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.iloc[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>], [<span class="number">1</span>,<span class="number">3</span>]] <span class="comment">#都是位置索引</span></span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>b</th><br>      <th>d</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2017-01-02</th><br>      <td>5</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>2017-01-03</th><br>      <td>9</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>2017-01-05</th><br>      <td>17</td><br>      <td>19</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#混合标签位置选择</span></span><br><span class="line">df1.ix[<span class="number">2</span>:<span class="number">4</span>, [<span class="string">'a'</span>,<span class="string">'c'</span>]]</span><br></pre></td></tr></table></figure><pre><code>/root/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: DeprecationWarning: .ix is deprecated. Please use.loc for label based indexing or.iloc for positional indexingSee the documentation here:http://pandas.pydata.org/pandas-docs/stable/indexing.html#ix-indexer-is-deprecated</code></pre><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>a</th><br>      <th>c</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2017-01-03</th><br>      <td>8</td><br>      <td>10</td><br>    </tr><br>    <tr><br>      <th>2017-01-04</th><br>      <td>12</td><br>      <td>14</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.ix[<span class="string">'20170101'</span>:<span class="string">'20170104'</span>, <span class="number">2</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure><pre><code>/root/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: DeprecationWarning: .ix is deprecated. Please use.loc for label based indexing or.iloc for positional indexingSee the documentation here:http://pandas.pydata.org/pandas-docs/stable/indexing.html#ix-indexer-is-deprecated  &quot;&quot;&quot;Entry point for launching an IPython kernel.</code></pre><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>c</th><br>      <th>d</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2017-01-01</th><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>2017-01-02</th><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>2017-01-03</th><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>2017-01-04</th><br>      <td>14</td><br>      <td>15</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.a</span><br></pre></td></tr></table></figure><pre><code>2017-01-01     02017-01-02     42017-01-03     82017-01-04    122017-01-05    162017-01-06    20Freq: D, Name: a, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.a &gt; <span class="number">6</span></span><br></pre></td></tr></table></figure><pre><code>2017-01-01    False2017-01-02    False2017-01-03     True2017-01-04     True2017-01-05     True2017-01-06     TrueFreq: D, Name: a, dtype: bool</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1[df1.a&gt;<span class="number">6</span>]</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>a</th><br>      <th>b</th><br>      <th>c</th><br>      <th>d</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>2017-01-03</th><br>      <td>8</td><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>2017-01-04</th><br>      <td>12</td><br>      <td>13</td><br>      <td>14</td><br>      <td>15</td><br>    </tr><br>    <tr><br>      <th>2017-01-05</th><br>      <td>16</td><br>      <td>17</td><br>      <td>18</td><br>      <td>19</td><br>    </tr><br>    <tr><br>      <th>2017-01-06</th><br>      <td>20</td><br>      <td>21</td><br>      <td>22</td><br>      <td>23</td><br>    </tr><br>  </tbody><br></table><br></div><h1 id="赋值与操作"><a href="#赋值与操作" class="headerlink" title="赋值与操作"></a>赋值与操作</h1><h1 id="方法如下：-1"><a href="#方法如下：-1" class="headerlink" title="方法如下："></a>方法如下：</h1><p>通过定位赋值</p><p>df.append()添加行</p><p>df.insert()在指定位置插入指定名称的列</p><p>df.pop()弹出指定列</p><p>df.drop()删除多列或多行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dates = np.arange(<span class="number">20170101</span>, <span class="number">20170107</span>)</span><br><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">24</span>).reshape((<span class="number">6</span>,<span class="number">4</span>)), index=dates, columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>8</td><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>12</td><br>      <td>13</td><br>      <td>14</td><br>      <td>15</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>16</td><br>      <td>17</td><br>      <td>18</td><br>      <td>19</td><br>    </tr><br>    <tr><br>      <th>20170106</th><br>      <td>20</td><br>      <td>21</td><br>      <td>22</td><br>      <td>23</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.iloc[<span class="number">2</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><pre><code>10</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1.iloc[<span class="number">2</span>,<span class="number">2</span>] = <span class="number">100</span> </span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>8</td><br>      <td>9</td><br>      <td>100</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>12</td><br>      <td>13</td><br>      <td>14</td><br>      <td>15</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>16</td><br>      <td>17</td><br>      <td>18</td><br>      <td>19</td><br>    </tr><br>    <tr><br>      <th>20170106</th><br>      <td>20</td><br>      <td>21</td><br>      <td>22</td><br>      <td>23</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1.loc[<span class="number">20170103</span>, <span class="string">'B'</span>] = <span class="number">200</span></span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>8</td><br>      <td>200</td><br>      <td>100</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>12</td><br>      <td>13</td><br>      <td>14</td><br>      <td>15</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>16</td><br>      <td>17</td><br>      <td>18</td><br>      <td>19</td><br>    </tr><br>    <tr><br>      <th>20170106</th><br>      <td>20</td><br>      <td>21</td><br>      <td>22</td><br>      <td>23</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1[df1.A &gt; <span class="number">10</span>] = <span class="number">0</span> </span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>8</td><br>      <td>200</td><br>      <td>100</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>0</td><br>      <td>0</td><br>      <td>0</td><br>      <td>0</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>0</td><br>      <td>0</td><br>      <td>0</td><br>      <td>0</td><br>    </tr><br>    <tr><br>      <th>20170106</th><br>      <td>0</td><br>      <td>0</td><br>      <td>0</td><br>      <td>0</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1[df1.A == <span class="number">0</span>] = <span class="number">1</span>  </span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>8</td><br>      <td>200</td><br>      <td>100</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>    </tr><br>    <tr><br>      <th>20170106</th><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1[<span class="string">'E'</span>] = <span class="number">10</span>  <span class="comment">#添加一列</span></span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>10</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>      <td>10</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>8</td><br>      <td>200</td><br>      <td>100</td><br>      <td>11</td><br>      <td>10</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>10</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>10</td><br>    </tr><br>    <tr><br>      <th>20170106</th><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>10</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1[<span class="string">'F'</span>] = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], index=df1.index <span class="comment">#添加一列</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>      <th>F</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>10</td><br>      <td>1</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>      <td>10</td><br>      <td>2</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>8</td><br>      <td>200</td><br>      <td>100</td><br>      <td>11</td><br>      <td>10</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>10</td><br>      <td>4</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>10</td><br>      <td>5</td><br>    </tr><br>    <tr><br>      <th>20170106</th><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>1</td><br>      <td>10</td><br>      <td>6</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df1.loc[<span class="string">'20170107'</span>, [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">"D"</span>]] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] </span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>      <th>F</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>1.0</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>4.0</td><br>      <td>5.0</td><br>      <td>6.0</td><br>      <td>7.0</td><br>      <td>10.0</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>8.0</td><br>      <td>200.0</td><br>      <td>100.0</td><br>      <td>11.0</td><br>      <td>10.0</td><br>      <td>3.0</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>4.0</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>5.0</td><br>    </tr><br>    <tr><br>      <th>20170106</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>6.0</td><br>    </tr><br>    <tr><br>      <th>20170107</th><br>      <td>1.0</td><br>      <td>2.0</td><br>      <td>3.0</td><br>      <td>4.0</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], index=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>])</span><br><span class="line">s1.name = <span class="string">'S1'</span></span><br><span class="line">df2 = df1.append(s1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>      <th>F</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>1.0</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>4.0</td><br>      <td>5.0</td><br>      <td>6.0</td><br>      <td>7.0</td><br>      <td>10.0</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>8.0</td><br>      <td>200.0</td><br>      <td>100.0</td><br>      <td>11.0</td><br>      <td>10.0</td><br>      <td>3.0</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>4.0</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>5.0</td><br>    </tr><br>    <tr><br>      <th>20170106</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>6.0</td><br>    </tr><br>    <tr><br>      <th>20170107</th><br>      <td>1.0</td><br>      <td>2.0</td><br>      <td>3.0</td><br>      <td>4.0</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>    <tr><br>      <th>S1</th><br>      <td>1.0</td><br>      <td>2.0</td><br>      <td>3.0</td><br>      <td>4.0</td><br>      <td>5.0</td><br>      <td>6.0</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#插入列</span></span><br><span class="line">df1.insert(<span class="number">1</span>, <span class="string">'G'</span>, df2[<span class="string">'E'</span>]) <span class="comment">#在列1的位置插入 索引为G的列</span></span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>G</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>      <th>F</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>1.0</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>4.0</td><br>      <td>10.0</td><br>      <td>5.0</td><br>      <td>6.0</td><br>      <td>7.0</td><br>      <td>10.0</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>8.0</td><br>      <td>10.0</td><br>      <td>200.0</td><br>      <td>100.0</td><br>      <td>11.0</td><br>      <td>10.0</td><br>      <td>3.0</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>4.0</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>5.0</td><br>    </tr><br>    <tr><br>      <th>20170106</th><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>6.0</td><br>    </tr><br>    <tr><br>      <th>20170107</th><br>      <td>1.0</td><br>      <td>NaN</td><br>      <td>2.0</td><br>      <td>3.0</td><br>      <td>4.0</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = df1.pop(<span class="string">'G'</span>) <span class="comment">#弹出G列 </span></span><br><span class="line">df1.insert(<span class="number">6</span>, <span class="string">'G'</span>, g) <span class="comment">#插入到最后</span></span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>      <th>F</th><br>      <th>G</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>4.0</td><br>      <td>5.0</td><br>      <td>6.0</td><br>      <td>7.0</td><br>      <td>10.0</td><br>      <td>2.0</td><br>      <td>10.0</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>8.0</td><br>      <td>200.0</td><br>      <td>100.0</td><br>      <td>11.0</td><br>      <td>10.0</td><br>      <td>3.0</td><br>      <td>10.0</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>4.0</td><br>      <td>10.0</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>5.0</td><br>      <td>10.0</td><br>    </tr><br>    <tr><br>      <th>20170106</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>6.0</td><br>      <td>10.0</td><br>    </tr><br>    <tr><br>      <th>20170107</th><br>      <td>1.0</td><br>      <td>2.0</td><br>      <td>3.0</td><br>      <td>4.0</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> df1[<span class="string">'G'</span>] <span class="comment">#删除G列</span></span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>      <th>F</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>1.0</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>4.0</td><br>      <td>5.0</td><br>      <td>6.0</td><br>      <td>7.0</td><br>      <td>10.0</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>8.0</td><br>      <td>200.0</td><br>      <td>100.0</td><br>      <td>11.0</td><br>      <td>10.0</td><br>      <td>3.0</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>4.0</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>5.0</td><br>    </tr><br>    <tr><br>      <th>20170106</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>6.0</td><br>    </tr><br>    <tr><br>      <th>20170107</th><br>      <td>1.0</td><br>      <td>2.0</td><br>      <td>3.0</td><br>      <td>4.0</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df2 = df1.drop([<span class="string">'A'</span>, <span class="string">'B'</span>], axis=<span class="number">1</span>) <span class="comment">#删除多列</span></span><br><span class="line">df2</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>      <th>F</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>1.0</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>6.0</td><br>      <td>7.0</td><br>      <td>10.0</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>100.0</td><br>      <td>11.0</td><br>      <td>10.0</td><br>      <td>3.0</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>4.0</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>5.0</td><br>    </tr><br>    <tr><br>      <th>20170106</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>6.0</td><br>    </tr><br>    <tr><br>      <th>20170107</th><br>      <td>3.0</td><br>      <td>4.0</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>      <th>F</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>1.0</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>4.0</td><br>      <td>5.0</td><br>      <td>6.0</td><br>      <td>7.0</td><br>      <td>10.0</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>8.0</td><br>      <td>200.0</td><br>      <td>100.0</td><br>      <td>11.0</td><br>      <td>10.0</td><br>      <td>3.0</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>4.0</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>5.0</td><br>    </tr><br>    <tr><br>      <th>20170106</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>6.0</td><br>    </tr><br>    <tr><br>      <th>20170107</th><br>      <td>1.0</td><br>      <td>2.0</td><br>      <td>3.0</td><br>      <td>4.0</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3 = df1.drop([<span class="number">20170106</span>], axis=<span class="number">0</span>)<span class="comment">#删除行</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>      <th>F</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>1.0</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>4.0</td><br>      <td>5.0</td><br>      <td>6.0</td><br>      <td>7.0</td><br>      <td>10.0</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>8.0</td><br>      <td>200.0</td><br>      <td>100.0</td><br>      <td>11.0</td><br>      <td>10.0</td><br>      <td>3.0</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>4.0</td><br>    </tr><br>    <tr><br>      <th>20170105</th><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>1.0</td><br>      <td>10.0</td><br>      <td>5.0</td><br>    </tr><br>    <tr><br>      <th>20170107</th><br>      <td>1.0</td><br>      <td>2.0</td><br>      <td>3.0</td><br>      <td>4.0</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1.index</span><br></pre></td></tr></table></figure><pre><code>Index([20170101, 20170102, 20170103, 20170104, 20170105, 20170106, &apos;20170107&apos;], dtype=&apos;object&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础引入&quot;&gt;&lt;a href=&quot;#基础引入&quot; class=&quot;headerlink&quot; title=&quot;基础引入&quot;&gt;&lt;/a&gt;基础引入&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="python" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/python/"/>
    
    
    <category term="python" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/python/"/>
    
    <category term="pandas" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>Pandas处理丢失数据、读写文件、数据合并、绘图</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/08/Pandas%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/08/Pandas%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</id>
    <published>2019-11-08T06:38:47.000Z</published>
    <updated>2019-11-08T06:38:47.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="处理丢失数据"><a href="#处理丢失数据" class="headerlink" title="处理丢失数据"></a>处理丢失数据</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dates = np.arange(<span class="number">20170101</span>, <span class="number">20170105</span>)</span><br><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape((<span class="number">4</span>,<span class="number">3</span>)), index = dates , columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>])</span><br><span class="line">df1</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>3</td><br>      <td>4</td><br>      <td>5</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>6</td><br>      <td>7</td><br>      <td>8</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df2 = pd.DataFrame(df1, index=dates, columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>])</span><br><span class="line">df2</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>3</td><br>      <td>4</td><br>      <td>5</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>6</td><br>      <td>7</td><br>      <td>8</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = pd.Series([<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>], index=dates[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">s2 = pd.Series([<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>], index=dates[<span class="number">1</span>:])</span><br><span class="line">df2[<span class="string">'D'</span>] = s1 </span><br><span class="line">df2[<span class="string">'E'</span>] = s2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3.0</td><br>      <td>NaN</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>3</td><br>      <td>4</td><br>      <td>5</td><br>      <td>4.0</td><br>      <td>3.0</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>6</td><br>      <td>7</td><br>      <td>8</td><br>      <td>6.0</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>      <td>NaN</td><br>      <td>5.0</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df2.dropna(axis=<span class="number">0</span>, how=<span class="string">'any'</span>) <span class="comment">#axis=[0,1] 0代表行， 1代表列  how=['any', 'all'] any任意一个 all代表全部</span></span><br><span class="line"><span class="comment"># any就是如果有一个是空 就删除此行</span></span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170102</th><br>      <td>3</td><br>      <td>4</td><br>      <td>5</td><br>      <td>4.0</td><br>      <td>3.0</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>6</td><br>      <td>7</td><br>      <td>8</td><br>      <td>6.0</td><br>      <td>2.0</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.dropna(axis=<span class="number">1</span>, how=<span class="string">'any'</span>)</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>3</td><br>      <td>4</td><br>      <td>5</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>6</td><br>      <td>7</td><br>      <td>8</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.fillna(value=<span class="number">0</span>) <span class="comment">#赋值空值</span></span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3.0</td><br>      <td>0.0</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>3</td><br>      <td>4</td><br>      <td>5</td><br>      <td>4.0</td><br>      <td>3.0</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>6</td><br>      <td>7</td><br>      <td>8</td><br>      <td>6.0</td><br>      <td>2.0</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>      <td>0.0</td><br>      <td>5.0</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2.isnull() <span class="comment">#查看空值</span></span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>E</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>20170101</th><br>      <td>False</td><br>      <td>False</td><br>      <td>False</td><br>      <td>False</td><br>      <td>True</td><br>    </tr><br>    <tr><br>      <th>20170102</th><br>      <td>False</td><br>      <td>False</td><br>      <td>False</td><br>      <td>False</td><br>      <td>False</td><br>    </tr><br>    <tr><br>      <th>20170103</th><br>      <td>False</td><br>      <td>False</td><br>      <td>False</td><br>      <td>False</td><br>      <td>False</td><br>    </tr><br>    <tr><br>      <th>20170104</th><br>      <td>False</td><br>      <td>False</td><br>      <td>False</td><br>      <td>True</td><br>      <td>False</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.any(df2.isnull())  <span class="comment">#只要有一个空值就返回True</span></span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.all(df2.isnull()) <span class="comment">#所有为空值才返回true</span></span><br></pre></td></tr></table></figure><pre><code>False</code></pre><h1 id="读取与写入文件"><a href="#读取与写入文件" class="headerlink" title="读取与写入文件"></a>读取与写入文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file = pd.read_csv(<span class="string">'./datasets/housing/housing.csv'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">file.head()</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>longitude</th><br>      <th>latitude</th><br>      <th>housing_median_age</th><br>      <th>total_rooms</th><br>      <th>total_bedrooms</th><br>      <th>population</th><br>      <th>households</th><br>      <th>median_income</th><br>      <th>median_house_value</th><br>      <th>ocean_proximity</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>-122.23</td><br>      <td>37.88</td><br>      <td>41.0</td><br>      <td>880.0</td><br>      <td>129.0</td><br>      <td>322.0</td><br>      <td>126.0</td><br>      <td>8.3252</td><br>      <td>452600.0</td><br>      <td>NEAR BAY</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>-122.22</td><br>      <td>37.86</td><br>      <td>21.0</td><br>      <td>7099.0</td><br>      <td>1106.0</td><br>      <td>2401.0</td><br>      <td>1138.0</td><br>      <td>8.3014</td><br>      <td>358500.0</td><br>      <td>NEAR BAY</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>-122.24</td><br>      <td>37.85</td><br>      <td>52.0</td><br>      <td>1467.0</td><br>      <td>190.0</td><br>      <td>496.0</td><br>      <td>177.0</td><br>      <td>7.2574</td><br>      <td>352100.0</td><br>      <td>NEAR BAY</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>-122.25</td><br>      <td>37.85</td><br>      <td>52.0</td><br>      <td>1274.0</td><br>      <td>235.0</td><br>      <td>558.0</td><br>      <td>219.0</td><br>      <td>5.6431</td><br>      <td>341300.0</td><br>      <td>NEAR BAY</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>-122.25</td><br>      <td>37.85</td><br>      <td>52.0</td><br>      <td>1627.0</td><br>      <td>280.0</td><br>      <td>565.0</td><br>      <td>259.0</td><br>      <td>3.8462</td><br>      <td>342200.0</td><br>      <td>NEAR BAY</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.sort_values(by=<span class="string">'housing_median_age'</span>).head()</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>longitude</th><br>      <th>latitude</th><br>      <th>housing_median_age</th><br>      <th>total_rooms</th><br>      <th>total_bedrooms</th><br>      <th>population</th><br>      <th>households</th><br>      <th>median_income</th><br>      <th>median_house_value</th><br>      <th>ocean_proximity</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>3130</th><br>      <td>-117.95</td><br>      <td>35.08</td><br>      <td>1.0</td><br>      <td>83.0</td><br>      <td>15.0</td><br>      <td>32.0</td><br>      <td>15.0</td><br>      <td>4.8750</td><br>      <td>141700.0</td><br>      <td>INLAND</td><br>    </tr><br>    <tr><br>      <th>19536</th><br>      <td>-120.93</td><br>      <td>37.65</td><br>      <td>1.0</td><br>      <td>2254.0</td><br>      <td>328.0</td><br>      <td>402.0</td><br>      <td>112.0</td><br>      <td>4.2500</td><br>      <td>189200.0</td><br>      <td>INLAND</td><br>    </tr><br>    <tr><br>      <th>12286</th><br>      <td>-116.95</td><br>      <td>33.86</td><br>      <td>1.0</td><br>      <td>6.0</td><br>      <td>2.0</td><br>      <td>8.0</td><br>      <td>2.0</td><br>      <td>1.6250</td><br>      <td>55000.0</td><br>      <td>INLAND</td><br>    </tr><br>    <tr><br>      <th>18972</th><br>      <td>-122.00</td><br>      <td>38.23</td><br>      <td>1.0</td><br>      <td>2062.0</td><br>      <td>343.0</td><br>      <td>872.0</td><br>      <td>268.0</td><br>      <td>5.2636</td><br>      <td>191300.0</td><br>      <td>INLAND</td><br>    </tr><br>    <tr><br>      <th>10391</th><br>      <td>-117.65</td><br>      <td>33.58</td><br>      <td>2.0</td><br>      <td>2411.0</td><br>      <td>354.0</td><br>      <td>703.0</td><br>      <td>217.0</td><br>      <td>7.8061</td><br>      <td>331400.0</td><br>      <td>&lt;1H OCEAN</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.iloc[<span class="number">2</span>,<span class="number">0</span>] = <span class="number">-112.23</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.head()</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>longitude</th><br>      <th>latitude</th><br>      <th>housing_median_age</th><br>      <th>total_rooms</th><br>      <th>total_bedrooms</th><br>      <th>population</th><br>      <th>households</th><br>      <th>median_income</th><br>      <th>median_house_value</th><br>      <th>ocean_proximity</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>-122.23</td><br>      <td>37.88</td><br>      <td>41.0</td><br>      <td>880.0</td><br>      <td>129.0</td><br>      <td>322.0</td><br>      <td>126.0</td><br>      <td>8.3252</td><br>      <td>452600.0</td><br>      <td>NEAR BAY</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>-122.22</td><br>      <td>37.86</td><br>      <td>21.0</td><br>      <td>7099.0</td><br>      <td>1106.0</td><br>      <td>2401.0</td><br>      <td>1138.0</td><br>      <td>8.3014</td><br>      <td>358500.0</td><br>      <td>NEAR BAY</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>-122.24</td><br>      <td>37.85</td><br>      <td>52.0</td><br>      <td>1467.0</td><br>      <td>190.0</td><br>      <td>496.0</td><br>      <td>177.0</td><br>      <td>7.2574</td><br>      <td>352100.0</td><br>      <td>NEAR BAY</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>-122.25</td><br>      <td>37.85</td><br>      <td>52.0</td><br>      <td>1274.0</td><br>      <td>235.0</td><br>      <td>558.0</td><br>      <td>219.0</td><br>      <td>5.6431</td><br>      <td>341300.0</td><br>      <td>NEAR BAY</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>-122.25</td><br>      <td>37.85</td><br>      <td>52.0</td><br>      <td>1627.0</td><br>      <td>280.0</td><br>      <td>565.0</td><br>      <td>259.0</td><br>      <td>3.8462</td><br>      <td>342200.0</td><br>      <td>NEAR BAY</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.to_csv(<span class="string">'ceshidata.csv'</span>) <span class="comment">#存储</span></span><br></pre></td></tr></table></figure><h1 id="数据合并"><a href="#数据合并" class="headerlink" title="数据合并"></a>数据合并</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)), columns=[<span class="string">'a'</span>, <span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df2 = pd.DataFrame(np.arange(<span class="number">12</span>,<span class="number">24</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)), columns=[<span class="string">'a'</span>, <span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df3 = pd.DataFrame(np.arange(<span class="number">24</span>,<span class="number">36</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)), columns=[<span class="string">'a'</span>, <span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">print(df1)</span><br><span class="line">print(df2)</span><br><span class="line">print(df3)</span><br></pre></td></tr></table></figure><pre><code>   a  b   c   d0  0  1   2   31  4  5   6   72  8  9  10  11    a   b   c   d0  12  13  14  151  16  17  18  192  20  21  22  23    a   b   c   d0  24  25  26  271  28  29  30  312  32  33  34  35</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df4 = pd.concat([df1, df2, df3], axis=<span class="number">0</span>)   <span class="comment">#行合并,改变行形态</span></span><br><span class="line">df4</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>a</th><br>      <th>b</th><br>      <th>c</th><br>      <th>d</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>8</td><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>0</th><br>      <td>12</td><br>      <td>13</td><br>      <td>14</td><br>      <td>15</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>16</td><br>      <td>17</td><br>      <td>18</td><br>      <td>19</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>20</td><br>      <td>21</td><br>      <td>22</td><br>      <td>23</td><br>    </tr><br>    <tr><br>      <th>0</th><br>      <td>24</td><br>      <td>25</td><br>      <td>26</td><br>      <td>27</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>28</td><br>      <td>29</td><br>      <td>30</td><br>      <td>31</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>32</td><br>      <td>33</td><br>      <td>34</td><br>      <td>35</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df4 = pd.concat([df1, df2, df3], axis=<span class="number">0</span>, ignore_index=<span class="literal">True</span>)<span class="comment">#行合并，不考虑原来的index</span></span><br><span class="line">df4</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>a</th><br>      <th>b</th><br>      <th>c</th><br>      <th>d</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>8</td><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>12</td><br>      <td>13</td><br>      <td>14</td><br>      <td>15</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>16</td><br>      <td>17</td><br>      <td>18</td><br>      <td>19</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>20</td><br>      <td>21</td><br>      <td>22</td><br>      <td>23</td><br>    </tr><br>    <tr><br>      <th>6</th><br>      <td>24</td><br>      <td>25</td><br>      <td>26</td><br>      <td>27</td><br>    </tr><br>    <tr><br>      <th>7</th><br>      <td>28</td><br>      <td>29</td><br>      <td>30</td><br>      <td>31</td><br>    </tr><br>    <tr><br>      <th>8</th><br>      <td>32</td><br>      <td>33</td><br>      <td>34</td><br>      <td>35</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df5 =pd.concat([df1, df2, df3], axis=<span class="number">1</span>) <span class="comment">#列合并，改变列形态</span></span><br><span class="line">df5</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>a</th><br>      <th>b</th><br>      <th>c</th><br>      <th>d</th><br>      <th>a</th><br>      <th>b</th><br>      <th>c</th><br>      <th>d</th><br>      <th>a</th><br>      <th>b</th><br>      <th>c</th><br>      <th>d</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>      <td>12</td><br>      <td>13</td><br>      <td>14</td><br>      <td>15</td><br>      <td>24</td><br>      <td>25</td><br>      <td>26</td><br>      <td>27</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>      <td>16</td><br>      <td>17</td><br>      <td>18</td><br>      <td>19</td><br>      <td>28</td><br>      <td>29</td><br>      <td>30</td><br>      <td>31</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>8</td><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>      <td>20</td><br>      <td>21</td><br>      <td>22</td><br>      <td>23</td><br>      <td>32</td><br>      <td>33</td><br>      <td>34</td><br>      <td>35</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)), columns=[<span class="string">'a'</span>, <span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">df2 = pd.DataFrame(np.arange(<span class="number">12</span>,<span class="number">24</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)), columns=[<span class="string">'a'</span>, <span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>])</span><br><span class="line">print(df1)</span><br><span class="line">print(df2)</span><br></pre></td></tr></table></figure><pre><code>   a  b   c   d0  0  1   2   31  4  5   6   72  8  9  10  11    a   c   d   e0  12  13  14  151  16  17  18  192  20  21  22  23</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df6 = pd.concat([df1, df2], join=<span class="string">'outer'</span>, ignore_index=<span class="literal">True</span>) <span class="comment">#合并两个表，缺少的部分填充NaN</span></span><br><span class="line"></span><br><span class="line">df6</span><br></pre></td></tr></table></figure><pre><code>/root/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: FutureWarning: Sorting because non-concatenation axis is not aligned. A future versionof pandas will change to not sort by default.To accept the future behavior, pass &apos;sort=False&apos;.To retain the current behavior and silence the warning, pass &apos;sort=True&apos;.  &quot;&quot;&quot;Entry point for launching an IPython kernel.</code></pre><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>a</th><br>      <th>b</th><br>      <th>c</th><br>      <th>d</th><br>      <th>e</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0</td><br>      <td>1.0</td><br>      <td>2</td><br>      <td>3</td><br>      <td>NaN</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>4</td><br>      <td>5.0</td><br>      <td>6</td><br>      <td>7</td><br>      <td>NaN</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>8</td><br>      <td>9.0</td><br>      <td>10</td><br>      <td>11</td><br>      <td>NaN</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>12</td><br>      <td>NaN</td><br>      <td>13</td><br>      <td>14</td><br>      <td>15.0</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>16</td><br>      <td>NaN</td><br>      <td>17</td><br>      <td>18</td><br>      <td>19.0</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>20</td><br>      <td>NaN</td><br>      <td>21</td><br>      <td>22</td><br>      <td>23.0</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df7 = pd.concat([df1, df2], join=<span class="string">'inner'</span>, ignore_index=<span class="literal">True</span>) <span class="comment">#合并两个表，缺少的部分去掉</span></span><br><span class="line">df7</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>a</th><br>      <th>c</th><br>      <th>d</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0</td><br>      <td>2</td><br>      <td>3</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>4</td><br>      <td>6</td><br>      <td>7</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>8</td><br>      <td>10</td><br>      <td>11</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>12</td><br>      <td>13</td><br>      <td>14</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>16</td><br>      <td>17</td><br>      <td>18</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>20</td><br>      <td>21</td><br>      <td>22</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>)), columns=[<span class="string">'a'</span>, <span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'f'</span>])</span><br><span class="line">df2 = pd.DataFrame(np.arange(<span class="number">12</span>,<span class="number">24</span>).reshape((<span class="number">4</span>,<span class="number">3</span>)), columns=[<span class="string">'a'</span>, <span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line">print(df1)</span><br><span class="line">print(df2)</span><br></pre></td></tr></table></figure><pre><code>   a  b   c   f0  0  1   2   31  4  5   6   72  8  9  10  11    a   c   d0  12  13  141  15  16  172  18  19  203  21  22  23</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df8 = pd.concat([df1, df2], axis=<span class="number">1</span>, join_axes=[df1.index]) <span class="comment">#列合并， index使用df1的index</span></span><br><span class="line">df8</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>a</th><br>      <th>b</th><br>      <th>c</th><br>      <th>f</th><br>      <th>a</th><br>      <th>c</th><br>      <th>d</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0</td><br>      <td>1</td><br>      <td>2</td><br>      <td>3</td><br>      <td>12</td><br>      <td>13</td><br>      <td>14</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>4</td><br>      <td>5</td><br>      <td>6</td><br>      <td>7</td><br>      <td>15</td><br>      <td>16</td><br>      <td>17</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>8</td><br>      <td>9</td><br>      <td>10</td><br>      <td>11</td><br>      <td>18</td><br>      <td>19</td><br>      <td>20</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df8 = pd.concat([df1, df2], axis=<span class="number">1</span>) <span class="comment">#列合并， index使用df1的index</span></span><br><span class="line">df8</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>a</th><br>      <th>b</th><br>      <th>c</th><br>      <th>f</th><br>      <th>a</th><br>      <th>c</th><br>      <th>d</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>0.0</td><br>      <td>1.0</td><br>      <td>2.0</td><br>      <td>3.0</td><br>      <td>12</td><br>      <td>13</td><br>      <td>14</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>4.0</td><br>      <td>5.0</td><br>      <td>6.0</td><br>      <td>7.0</td><br>      <td>15</td><br>      <td>16</td><br>      <td>17</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>8.0</td><br>      <td>9.0</td><br>      <td>10.0</td><br>      <td>11.0</td><br>      <td>18</td><br>      <td>19</td><br>      <td>20</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>21</td><br>      <td>22</td><br>      <td>23</td><br>    </tr><br>  </tbody><br></table><br></div><h1 id="pandas-合并-merge"><a href="#pandas-合并-merge" class="headerlink" title="pandas 合并 merge"></a>pandas 合并 merge</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">left = pd.DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'K0'</span>,<span class="string">'K1'</span>,<span class="string">'K2'</span>,<span class="string">'K3'</span>], </span><br><span class="line">                    <span class="string">'A'</span>:[<span class="string">'A0'</span>,<span class="string">'A1'</span>,<span class="string">'A2'</span>,<span class="string">'A3'</span>],</span><br><span class="line">                    <span class="string">'B'</span>:[<span class="string">'B0'</span>,<span class="string">'B1'</span>,<span class="string">'B2'</span>,<span class="string">'B3'</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'K0'</span>,<span class="string">'K1'</span>,<span class="string">'K2'</span>,<span class="string">'K3'</span>],</span><br><span class="line">                     <span class="string">'C'</span>:[<span class="string">'C0'</span>,<span class="string">'C1'</span>,<span class="string">'C2'</span>,<span class="string">'C3'</span>],</span><br><span class="line">                     <span class="string">'D'</span>:[<span class="string">'D0'</span>,<span class="string">'D1'</span>,<span class="string">'D2'</span>,<span class="string">'D3'</span>]&#125;)</span><br><span class="line">print(left)</span><br><span class="line">print(right)</span><br></pre></td></tr></table></figure><pre><code>  key   A   B0  K0  A0  B01  K1  A1  B12  K2  A2  B23  K3  A3  B3  key   C   D0  K0  C0  D01  K1  C1  D12  K2  C2  D23  K3  C3  D3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = pd.merge(left, right, on=<span class="string">'key'</span>) <span class="comment">#左右合并 依据key这一列</span></span><br><span class="line">res</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>key</th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>K0</td><br>      <td>A0</td><br>      <td>B0</td><br>      <td>C0</td><br>      <td>D0</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>K1</td><br>      <td>A1</td><br>      <td>B1</td><br>      <td>C1</td><br>      <td>D1</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>K2</td><br>      <td>A2</td><br>      <td>B2</td><br>      <td>C2</td><br>      <td>D2</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>K3</td><br>      <td>A3</td><br>      <td>B3</td><br>      <td>C3</td><br>      <td>D3</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">left = pd.DataFrame(&#123;<span class="string">'key1'</span>:[<span class="string">'K0'</span>,<span class="string">'K0'</span>,<span class="string">'K1'</span>,<span class="string">'K2'</span>], </span><br><span class="line">                     <span class="string">'key2'</span>:[<span class="string">'K0'</span>,<span class="string">'K1'</span>,<span class="string">'K0'</span>,<span class="string">'K1'</span>], </span><br><span class="line">                    <span class="string">'A'</span>:[<span class="string">'A0'</span>,<span class="string">'A1'</span>,<span class="string">'A2'</span>,<span class="string">'A3'</span>],</span><br><span class="line">                    <span class="string">'B'</span>:[<span class="string">'B0'</span>,<span class="string">'B1'</span>,<span class="string">'B2'</span>,<span class="string">'B3'</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'key1'</span>:[<span class="string">'K0'</span>,<span class="string">'K1'</span>,<span class="string">'K1'</span>,<span class="string">'K3'</span>],</span><br><span class="line">                      <span class="string">'key2'</span>:[<span class="string">'K0'</span>,<span class="string">'K0'</span>,<span class="string">'K0'</span>,<span class="string">'K0'</span>], </span><br><span class="line">                     <span class="string">'C'</span>:[<span class="string">'C0'</span>,<span class="string">'C1'</span>,<span class="string">'C2'</span>,<span class="string">'C3'</span>],</span><br><span class="line">                     <span class="string">'D'</span>:[<span class="string">'D0'</span>,<span class="string">'D1'</span>,<span class="string">'D2'</span>,<span class="string">'D3'</span>]&#125;)</span><br><span class="line">print(left)</span><br><span class="line">print(right)</span><br></pre></td></tr></table></figure><pre><code>  key1 key2   A   B0   K0   K0  A0  B01   K0   K1  A1  B12   K1   K0  A2  B23   K2   K1  A3  B3  key1 key2   C   D0   K0   K0  C0  D01   K1   K0  C1  D12   K1   K0  C2  D23   K3   K0  C3  D3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#how = ['left','right', 'inner', 'outer']</span></span><br><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>,<span class="string">'key2'</span>], how=<span class="string">'outer'</span>) <span class="comment">#how默认inner </span></span><br><span class="line">res</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>key1</th><br>      <th>key2</th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>K0</td><br>      <td>K0</td><br>      <td>A0</td><br>      <td>B0</td><br>      <td>C0</td><br>      <td>D0</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>K0</td><br>      <td>K1</td><br>      <td>A1</td><br>      <td>B1</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>K1</td><br>      <td>K0</td><br>      <td>A2</td><br>      <td>B2</td><br>      <td>C1</td><br>      <td>D1</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>K1</td><br>      <td>K0</td><br>      <td>A2</td><br>      <td>B2</td><br>      <td>C2</td><br>      <td>D2</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>K2</td><br>      <td>K1</td><br>      <td>A3</td><br>      <td>B3</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>K3</td><br>      <td>K0</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>C3</td><br>      <td>D3</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>,<span class="string">'key2'</span>], how=<span class="string">'inner'</span>) <span class="comment">#how默认inner  只保留相同</span></span><br><span class="line">res</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>key1</th><br>      <th>key2</th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>K0</td><br>      <td>K0</td><br>      <td>A0</td><br>      <td>B0</td><br>      <td>C0</td><br>      <td>D0</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>K1</td><br>      <td>K0</td><br>      <td>A2</td><br>      <td>B2</td><br>      <td>C1</td><br>      <td>D1</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>K1</td><br>      <td>K0</td><br>      <td>A2</td><br>      <td>B2</td><br>      <td>C2</td><br>      <td>D2</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(left)</span><br><span class="line">print(right)</span><br></pre></td></tr></table></figure><pre><code>  key1 key2   A   B0   K0   K0  A0  B01   K0   K1  A1  B12   K1   K0  A2  B23   K2   K1  A3  B3  key1 key2   C   D0   K0   K0  C0  D01   K1   K0  C1  D12   K1   K0  C2  D23   K3   K0  C3  D3</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>,<span class="string">'key2'</span>], how=<span class="string">'left'</span>) <span class="comment">#how=left只考虑左边的dataframe</span></span><br><span class="line">res</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>key1</th><br>      <th>key2</th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>K0</td><br>      <td>K0</td><br>      <td>A0</td><br>      <td>B0</td><br>      <td>C0</td><br>      <td>D0</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>K0</td><br>      <td>K1</td><br>      <td>A1</td><br>      <td>B1</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>K1</td><br>      <td>K0</td><br>      <td>A2</td><br>      <td>B2</td><br>      <td>C1</td><br>      <td>D1</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>K1</td><br>      <td>K0</td><br>      <td>A2</td><br>      <td>B2</td><br>      <td>C2</td><br>      <td>D2</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>K2</td><br>      <td>K1</td><br>      <td>A3</td><br>      <td>B3</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>,<span class="string">'key2'</span>], how=<span class="string">'outer'</span>, indicator=<span class="literal">True</span>) <span class="comment">#indicator显示merge信息</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>key1</th><br>      <th>key2</th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>_merge</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>K0</td><br>      <td>K0</td><br>      <td>A0</td><br>      <td>B0</td><br>      <td>C0</td><br>      <td>D0</td><br>      <td>both</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>K0</td><br>      <td>K1</td><br>      <td>A1</td><br>      <td>B1</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>left_only</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>K1</td><br>      <td>K0</td><br>      <td>A2</td><br>      <td>B2</td><br>      <td>C1</td><br>      <td>D1</td><br>      <td>both</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>K1</td><br>      <td>K0</td><br>      <td>A2</td><br>      <td>B2</td><br>      <td>C2</td><br>      <td>D2</td><br>      <td>both</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>K2</td><br>      <td>K1</td><br>      <td>A3</td><br>      <td>B3</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>left_only</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>K3</td><br>      <td>K0</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>C3</td><br>      <td>D3</td><br>      <td>right_only</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = pd.merge(left, right, on=[<span class="string">'key1'</span>,<span class="string">'key2'</span>], how=<span class="string">'outer'</span>, indicator=<span class="string">'indicator_column'</span>)<span class="comment">#可定义列名</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>key1</th><br>      <th>key2</th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>      <th>indicator_column</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>K0</td><br>      <td>K0</td><br>      <td>A0</td><br>      <td>B0</td><br>      <td>C0</td><br>      <td>D0</td><br>      <td>both</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>K0</td><br>      <td>K1</td><br>      <td>A1</td><br>      <td>B1</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>left_only</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>K1</td><br>      <td>K0</td><br>      <td>A2</td><br>      <td>B2</td><br>      <td>C1</td><br>      <td>D1</td><br>      <td>both</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>K1</td><br>      <td>K0</td><br>      <td>A2</td><br>      <td>B2</td><br>      <td>C2</td><br>      <td>D2</td><br>      <td>both</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>K2</td><br>      <td>K1</td><br>      <td>A3</td><br>      <td>B3</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>left_only</td><br>    </tr><br>    <tr><br>      <th>5</th><br>      <td>K3</td><br>      <td>K0</td><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>C3</td><br>      <td>D3</td><br>      <td>right_only</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">left = pd.DataFrame(&#123;<span class="string">'A'</span>:[<span class="string">'A0'</span>,<span class="string">'A1'</span>,<span class="string">'A2'</span>], </span><br><span class="line">                    <span class="string">'B'</span>:[<span class="string">'B0'</span>,<span class="string">'B1'</span>,<span class="string">'B2'</span>]&#125;,</span><br><span class="line">                   index = [<span class="string">'K0'</span>,<span class="string">'K1'</span>,<span class="string">'K2'</span>])</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'C'</span>:[<span class="string">'C0'</span>,<span class="string">'C1'</span>,<span class="string">'C2'</span>],</span><br><span class="line">                     <span class="string">'D'</span>:[<span class="string">'D0'</span>,<span class="string">'D1'</span>,<span class="string">'D2'</span>]&#125;,</span><br><span class="line">                    index=[<span class="string">'K0'</span>,<span class="string">'K2'</span>,<span class="string">'K3'</span>])</span><br><span class="line"></span><br><span class="line">print(left)</span><br><span class="line">print(right)</span><br></pre></td></tr></table></figure><pre><code>     A   BK0  A0  B0K1  A1  B1K2  A2  B2     C   DK0  C0  D0K2  C1  D1K3  C2  D2</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = pd.merge(left, right, left_index=<span class="literal">True</span>, right_index=<span class="literal">True</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">res</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>A</th><br>      <th>B</th><br>      <th>C</th><br>      <th>D</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>K0</th><br>      <td>A0</td><br>      <td>B0</td><br>      <td>C0</td><br>      <td>D0</td><br>    </tr><br>    <tr><br>      <th>K1</th><br>      <td>A1</td><br>      <td>B1</td><br>      <td>NaN</td><br>      <td>NaN</td><br>    </tr><br>    <tr><br>      <th>K2</th><br>      <td>A2</td><br>      <td>B2</td><br>      <td>C1</td><br>      <td>D1</td><br>    </tr><br>    <tr><br>      <th>K3</th><br>      <td>NaN</td><br>      <td>NaN</td><br>      <td>C2</td><br>      <td>D2</td><br>    </tr><br>  </tbody><br></table><br></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">boys = pd.DataFrame(&#123;<span class="string">'k'</span>:[<span class="string">'K0'</span>,<span class="string">'K1'</span>,<span class="string">'K2'</span>], <span class="string">'age'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;)</span><br><span class="line">girls = pd.DataFrame(&#123;<span class="string">'k'</span>:[<span class="string">'K0'</span>,<span class="string">'K0'</span>,<span class="string">'K3'</span>],<span class="string">'age'</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]&#125;)</span><br><span class="line">print(boys)</span><br><span class="line">print(girls)</span><br></pre></td></tr></table></figure><pre><code>    k  age0  K0    11  K1    22  K2    3    k  age0  K0    41  K0    52  K3    6</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = pd.merge(boys, girls, on=<span class="string">'k'</span>, suffixes=[<span class="string">'_boy'</span>, <span class="string">'_girl'</span>], how=<span class="string">'outer'</span>)  <span class="comment">#suffixes 同名属性加后缀区分</span></span><br><span class="line">res</span><br></pre></td></tr></table></figure><div><br><style scoped><br>    .dataframe tbody tr th:only-of-type {<br>        vertical-align: middle;<br>    }<br><br>    .dataframe tbody tr th {<br>        vertical-align: top;<br>    }<br><br>    .dataframe thead th {<br>        text-align: right;<br>    }<br></style><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>k</th><br>      <th>age_boy</th><br>      <th>age_girl</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>K0</td><br>      <td>1.0</td><br>      <td>4.0</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>K0</td><br>      <td>1.0</td><br>      <td>5.0</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>K1</td><br>      <td>2.0</td><br>      <td>NaN</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>K2</td><br>      <td>3.0</td><br>      <td>NaN</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>K3</td><br>      <td>NaN</td><br>      <td>6.0</td><br>    </tr><br>  </tbody><br></table><br></div><h1 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = pd.Series(np.random.randn(<span class="number">1000</span>), index=np.arange(<span class="number">1000</span>)) <span class="comment">#标准正态分布的随机数</span></span><br><span class="line">data = data.cumsum() <span class="comment">#累加</span></span><br><span class="line">data.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_48_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.randint(<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">print(x)</span><br><span class="line">x = x.cumsum()</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><pre><code>[2 5 3 1 9 6 3 3 8 9][ 2  7 10 11 20 26 29 32 40 49]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = pd.DataFrame(np.random.randn(<span class="number">1000</span>,<span class="number">4</span>), index=np.arange(<span class="number">1000</span>), columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line">data = data.cumsum() </span><br><span class="line">print(data.head())</span><br></pre></td></tr></table></figure><pre><code>          A         B         C         D0  3.164961 -0.160822  1.628288  1.2157911  4.190590 -1.004543  1.473195  2.4059982  6.736750 -0.502750  1.995162  0.5769673  6.306202 -1.891087  0.389709 -0.1728054  4.185784 -3.004508  1.179027 -0.947929</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_51_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ax = data.plot.scatter(x=<span class="string">'A'</span>,y=<span class="string">'B'</span>, color=<span class="string">'Blue'</span>, label=<span class="string">'class 1'</span>)</span><br><span class="line">ax = data.plot.scatter(x=<span class="string">'A'</span>,y=<span class="string">'C'</span>, color=<span class="string">'yellow'</span>, label=<span class="string">'class 2'</span>, ax=ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_52_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>array([[0.72842962, 0.10975279],       [0.15454685, 0.78988048],       [0.74866068, 0.03565489]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;处理丢失数据&quot;&gt;&lt;a href=&quot;#处理丢失数据&quot; class=&quot;headerlink&quot; title=&quot;处理丢失数据&quot;&gt;&lt;/a&gt;处理丢失数据&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="python" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/python/"/>
    
    
    <category term="python" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/python/"/>
    
    <category term="pandas" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow梯度消失/爆炸问题解决方案/使用预训练模型</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/06/EF6E429A-DD75-410E-BA1C-D2155AE088CB/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/06/EF6E429A-DD75-410E-BA1C-D2155AE088CB/</id>
    <published>2019-11-06T15:07:26.000Z</published>
    <updated>2019-11-06T15:07:26.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="梯度消失-爆炸问题解决方案-使用预训练模型"><a href="#梯度消失-爆炸问题解决方案-使用预训练模型" class="headerlink" title="梯度消失/爆炸问题解决方案/使用预训练模型"></a>梯度消失/爆炸问题解决方案/使用预训练模型</h1><h2 id="连接权重初始化"><a href="#连接权重初始化" class="headerlink" title="连接权重初始化"></a>连接权重初始化</h2><h3 id="Xavier初始化（当使用逻辑激活函数时）"><a href="#Xavier初始化（当使用逻辑激活函数时）" class="headerlink" title="Xavier初始化（当使用逻辑激活函数时）"></a>Xavier初始化（当使用逻辑激活函数时）</h3><p>连接权重按照均值为零标准差为（2/(n_inputs+n_inputs))^1/2的正态分布，或者一个在-r和r之间的均匀分布，其中r=(6/(n_inputs+n_inputs))^1/2.当输入和输出连接数大体一致时，可以简化。</p><h3 id="He初始化（当使用ReLU激活函数时）"><a href="#He初始化（当使用ReLU激活函数时）" class="headerlink" title="He初始化（当使用ReLU激活函数时）"></a>He初始化（当使用ReLU激活函数时）</h3><p>公式变为根号2次幂</p><h3 id="双曲正切函数"><a href="#双曲正切函数" class="headerlink" title="双曲正切函数"></a>双曲正切函数</h3><p>公式变为根号4次幂</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>fully_connected()函数默认使用Xavier初始化（使用均匀分布）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">he_init = tf.variance_scaling_initializer()</span><br><span class="line">hidden1 = tf.layers.dense(X, n_hidden1,activation=tf.nn.relu, kernel_initializer=he_init, name=&quot;hidden1&quot;)</span><br></pre></td></tr></table></figure></p><h2 id="非饱和激活函数"><a href="#非饱和激活函数" class="headerlink" title="非饱和激活函数"></a>非饱和激活函数</h2><p>用ReLU时，在训练过程中，如果神经元的权重更新到神经元的输入的总权重时负值时，这个神经元就开始输出0，除非ReLu函数的梯度为零并且输入为负。<br>解决这个问题，可能需要对ReLU函数变种。</p><h3 id="LeakyReLU（带泄漏线性整流函数）"><a href="#LeakyReLU（带泄漏线性整流函数）" class="headerlink" title="LeakyReLU（带泄漏线性整流函数）"></a>LeakyReLU（带泄漏线性整流函数）</h3><p>LeakyReLU(z)=max(alpha*z, z)超参数alpha表示函数泄漏程度，时z&lt;0时的坡度，一般设为 0.01。</p><h3 id="ELU-加速线性单元"><a href="#ELU-加速线性单元" class="headerlink" title="ELU (加速线性单元)"></a>ELU (加速线性单元)</h3><p>ELU(z) = alpha(exp(z) -1) ,(z&lt;0)<br>ELU(z) = z, (z&gt;=0)<br>超参数alpha指当z是一个极小的负数时，ELU接近于-alpha，通常设置为1。对于z=0有非0梯度，整体很平滑。<br>计算速度比ReLU和它的变种慢，由于使用指数函数，但训练过程中可以更快收敛。<br>通常训练时间：ELU&gt;leaky ReLU&gt;ReLU&gt;tahn&gt;逻辑函数</p><ul><li><p>Leaky_relu实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def leaky_relu(z, name=None):</span><br><span class="line">    return tf.maximum(0.01*z, z, name=None)</span><br><span class="line"></span><br><span class="line">#[......]</span><br><span class="line"></span><br><span class="line">with tf.name_scope(&quot;dnn&quot;):</span><br><span class="line">    hidden1 = tf.layers.dense(X, n_hidden1, activation=leaky_relu, name=&quot;hidden1&quot;)</span><br><span class="line">    hidden2 = tf.layers.dense(hidden1,n_hidden2, activation=leaky_relu, name=&quot;hidden2&quot;)</span><br><span class="line">    logits = tf.layers.dense(hidden2, n_outputs, name=&quot;outputs&quot;)</span><br></pre></td></tr></table></figure></li><li><p>relu</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hidden1 = tf.layers.dense(X, n_hidden1, activation=tf.nn.relu, name=“hidden1”)</span><br></pre></td></tr></table></figure></li></ul><h2 id="批量归一化"><a href="#批量归一化" class="headerlink" title="批量归一化"></a>批量归一化</h2><p>在每一层激活函数之前在模型里加入一个操作，简单零中心化和归一化输入，之后再通过每层两个新参数缩放和移动结果，让模型学会了最佳规模和每层输入的平均值。<br>构建阶段使用tf.layers.batch_nomalization()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">reset_graph()</span><br><span class="line"></span><br><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">n_inputs = 28 * 28</span><br><span class="line">n_hidden1 = 300</span><br><span class="line">n_hidden2 = 100</span><br><span class="line">n_outputs = 10</span><br><span class="line"></span><br><span class="line">X = tf.placeholder(tf.float32, shape=(None, n_inputs), name=&quot;X&quot;)</span><br><span class="line"></span><br><span class="line">training = tf.placeholder_with_default(False, shape=(), name=&quot;training&quot;)#告诉模型时训练状态还是测试状态</span><br><span class="line"></span><br><span class="line">hidden1 = tf.layers.dense(X, n_hidden1, name=&quot;hidden1&quot;)</span><br><span class="line">bn1 = tf.layers.batch_normalization(hidden1, training=training, momentum=0.9)#中心化和归一化输入</span><br><span class="line">#衰变值momentum</span><br><span class="line">#用于更新平均值v = v✖️momentum + v✖️（1 - momentum）</span><br><span class="line"></span><br><span class="line">bn1_act = tf.nn.elu(bn1)</span><br><span class="line"></span><br><span class="line">hidden2 = tf.layers.dense(bn1_act, n_hidden2, name=&quot;hidden2&quot;)</span><br><span class="line">bn2 = tf.layers.batch_normalization(hidden2, training=training, momentum=0.9)</span><br><span class="line">bn2_act = tf.nn.elu(bn2)</span><br><span class="line"></span><br><span class="line">logits_before_bn = tf.layers.dense(bn2_act, n_outputs, name=&quot;outputs&quot;)</span><br><span class="line">logits = tf.layers.batch_normalization(logits_before_bn, training=training, momentum=0.9)</span><br></pre></td></tr></table></figure></p><p>简化构建用partial<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from functools import partial</span><br><span class="line"></span><br><span class="line">my_batch_norm_layer = partial(tf.layers.batch_normalization, training=training, momentum=0.9)</span><br><span class="line"></span><br><span class="line">hidden1 = tf.layers.dense(X, n_hidden1, name=&quot;hidden1&quot;)</span><br><span class="line">bn1 = my_batch_norm_layer(hidden1)</span><br><span class="line">bn1_act = tf.nn.elu(bn1)</span><br><span class="line">hidden2 = tf.layers.dense(X, n_hidden2, name=&quot;hidden2&quot;)</span><br><span class="line">bn2 = my_batch_norm_layer(hidden2)</span><br><span class="line">bn2_act = tf.nn.elu(bn2)</span><br><span class="line">logits_before_bn = tf.layers.dense(bn2_act, n_inputs, name=&quot;outputs&quot;)</span><br><span class="line">logits = my_batch_norm_layer(logits_before_bn)</span><br></pre></td></tr></table></figure></p><p>执行阶段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">n_epochs =20</span><br><span class="line">batch_size = 200</span><br><span class="line"></span><br><span class="line">#关键</span><br><span class="line">extra_update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)</span><br><span class="line">#tf.GraphKeys.UPDATE_OPS是计算图内置的一个集合，保存一些需要在训练操作之前完成的操作，并配合tf.control_dependencies使用</span><br><span class="line">#tf.control_dependencies可以控制在执行前完成某些操作</span><br><span class="line">#此处即是在batch_norm中实现更新mean和variance的操作，这两个操作在tensorflow内部实现中被自动加入这个集合</span><br><span class="line"></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    init.run()</span><br><span class="line">    for epoch in range(n_epochs):</span><br><span class="line">        for X_batch, y_batch in shuffle_batch(X_train, y_train, batch_size):</span><br><span class="line">            sess.run([training_op, extra_update_ops], feed_dict=&#123;training:True, X:X_batch ,y:y_batch&#125;)</span><br><span class="line">#需告知training状态</span><br><span class="line">        accuracy_val = accuracy.eval(feed_dict=&#123;X:X_valid,y:y_valid&#125;)</span><br><span class="line">        print(epoch, &quot;Validation accuracy:&quot;, accuracy_val)</span><br><span class="line">    save_path = saver.save(sess, &quot;./model/my_model_final.ckpt&quot;)</span><br></pre></td></tr></table></figure></p><h2 id="梯度裁剪"><a href="#梯度裁剪" class="headerlink" title="梯度裁剪"></a>梯度裁剪</h2><p>在反向传播过程中裁剪梯度，从而保证不超过阈值。</p><p>构建阶段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">reset_graph()</span><br><span class="line"></span><br><span class="line">n_inputs = 28*28</span><br><span class="line">n_hidden1 = 300</span><br><span class="line">n_hidden2 = 50</span><br><span class="line">n_hidden3 = 50</span><br><span class="line">n_hidden4 = 50</span><br><span class="line">n_hidden5 = 50</span><br><span class="line">n_outputs = 10</span><br><span class="line"></span><br><span class="line">X = tf.placeholder(tf.float32, shape=(None, n_inputs), name=&quot;X&quot;)</span><br><span class="line">y = tf.placeholder(tf.int32, shape=(None), name=&quot;y&quot;)</span><br><span class="line"></span><br><span class="line">with tf.name_scope(&quot;dnn&quot;):</span><br><span class="line">    hidden1 = tf.layers.dense(X, n_hidden1, activation=tf.nn.relu, name=&quot;hidden1&quot;)</span><br><span class="line">    hidden2 = tf.layers.dense(hidden1, n_hidden2, activation=tf.nn.relu, name=&quot;hidden2&quot;)</span><br><span class="line">    hidden3 = tf.layers.dense(hidden2, n_hidden3, activation=tf.nn.relu, name=&quot;hidden3&quot;)</span><br><span class="line">    hidden4 = tf.layers.dense(hidden3, n_hidden4, activation=tf.nn.relu, name=&quot;hidden4&quot;)</span><br><span class="line">    hidden5 = tf.layers.dense(hidden4, n_hidden5, activation=tf.nn.relu, name=&quot;hidden5&quot;)</span><br><span class="line">    logits = tf.layers.dense(hidden5, n_outputs, name=&quot;outputs&quot;)</span><br><span class="line">    </span><br><span class="line">with tf.name_scope(&quot;loss&quot;):</span><br><span class="line">    xentropy = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=y, logits=logits)</span><br><span class="line">    loss = tf.reduce_mean(xentropy, name=&quot;loss&quot;)</span><br></pre></td></tr></table></figure></p><p>构建阶段使用tf.clip_by_value<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#train部分关键</span><br><span class="line">threshold = 1.0</span><br><span class="line"></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate)</span><br><span class="line">grads_and_vars = optimizer.compute_gradients(loss)</span><br><span class="line">capped_gvs = [(tf.clip_by_value(grad, -threshold, threshold), var) for grad, var in grads_and_vars]</span><br><span class="line">training_op = optimizer.apply_gradients(capped_gvs)</span><br></pre></td></tr></table></figure></p><p>执行和前面相同</p><h1 id="重用预训练网络"><a href="#重用预训练网络" class="headerlink" title="重用预训练网络"></a>重用预训练网络</h1><p>提升训练速度，减少训练数据。</p><h3 id="重用模型的一部分"><a href="#重用模型的一部分" class="headerlink" title="重用模型的一部分"></a>重用模型的一部分</h3><ul><li><p>法1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">reset_graph()</span><br><span class="line"></span><br><span class="line">saver = tf.train.import_meta_graph(&quot;my_model_final.ckpt.meta&quot;)</span><br><span class="line"></span><br><span class="line">#打印operation</span><br><span class="line">for op in tf.get_default_graph().get_operations():</span><br><span class="line">    print(op.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X = tf.get_default_graph().get_tensor_by_name(&quot;X: 0&quot;)</span><br><span class="line">y = tf.get_default_graph().get_tensor_by_name(&quot;y: 0&quot;)</span><br><span class="line"></span><br><span class="line">accuracy = tf.get_default_graph().get_tensor_by_name(&quot;eval/accuracy:0&quot;)</span><br><span class="line"></span><br><span class="line">training_op = tf.get_default_graph().get_operation_by_name(&quot;train/GradientDescent&quot;)</span><br><span class="line"></span><br><span class="line">#执行阶段</span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    saver.restore(sess, &quot;./my_model_final.ckpt&quot;)</span><br><span class="line"></span><br><span class="line">    for epoch in range(n_epochs):</span><br><span class="line">        for X_batch, y_batch in shuffle_batch(X_train, y_train, batch_size):</span><br><span class="line">            sess.run(training_op, feed_dict=&#123;X: X_batch, y: y_batch&#125;)</span><br><span class="line">        accuracy_val = accuracy.eval(feed_dict=&#123;X: X_valid, y: y_valid&#125;)</span><br><span class="line">        print(epoch, &quot;Validation accuracy:&quot;, accuracy_val)</span><br><span class="line"></span><br><span class="line">    save_path = saver.save(sess, &quot;./my_new_model_final.ckpt&quot;)</span><br></pre></td></tr></table></figure></li><li><p>法2：配置Saver使之还原模型只还原所有参数的一个子集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">reuse_vars = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=&quot;hidden[123]&quot;)#关键</span><br><span class="line"></span><br><span class="line">restore_saver = tf.train.Saver(reuse_vars)#to restore layers 123#关键</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    init.run()</span><br><span class="line">    restore_saver.restore(sess, &quot;./model/my_model_final.ckpt&quot;)#关键</span><br><span class="line">    </span><br><span class="line">    for epoch in range(n_epochs):</span><br><span class="line">        for X_batch, y_batch in shuffle_batch(X_train, y_train, batch_size):</span><br><span class="line">            sess.run(training_op, feed_dict=&#123;X:X_batch, y:y_batch&#125;)</span><br><span class="line">        accuracy_val = accuracy.eval(feed_dict=&#123;X:X_valid, y:y_valid&#125;)</span><br><span class="line">        print(epoch, &quot;Validation Accuracy:&quot;, accuracy_val)</span><br><span class="line">    </span><br><span class="line">    save_path = saver.save(sess, &quot;./my_new_model_final.ckpt&quot;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="冻结低层"><a href="#冻结低层" class="headerlink" title="冻结低层"></a>冻结低层</h3><ul><li>法1<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">reset_graph()</span><br><span class="line"></span><br><span class="line">n_inputs = 28 * 28</span><br><span class="line">n_hidden1 = 300</span><br><span class="line">n_hidden2 = 50</span><br><span class="line">n_hidden3 = 50</span><br><span class="line">n_hidden4 = 20</span><br><span class="line">n_outputs = 10</span><br><span class="line"></span><br><span class="line">X = tf.placeholder(tf.float32, shape=(None, n_inputs), name=&quot;X&quot;)</span><br><span class="line">y = tf.placeholder(tf.int32, shape=(None), name=&quot;y&quot;)</span><br><span class="line"></span><br><span class="line">with tf.name_scope(&quot;dnn&quot;):</span><br><span class="line">    hidden1 = tf.layers.dense(X, n_hidden1, activation=tf.nn.relu, name=&quot;hidden1&quot;)</span><br><span class="line">    hidden2 = tf.layers.dense(hidden1, n_hidden2, activation=tf.nn.relu, name=&quot;hidden2&quot;)</span><br><span class="line">    hidden3 = tf.layers.dense(hidden2, n_hidden3, activation=tf.nn.relu, name=&quot;hidden3&quot;)</span><br><span class="line">    hidden4 = tf.layers.dense(hidden3, n_hidden4, activation=tf.nn.relu, name=&quot;hidden4&quot;)</span><br><span class="line">    logits = tf.layers.dense(hidden4, n_outputs, name=&quot;outputs&quot;)</span><br><span class="line">    </span><br><span class="line">with tf.name_scope(&quot;loss&quot;):</span><br><span class="line">    xentropy = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=y, logits=logits)</span><br><span class="line">    loss = tf.reduce_mean(xentropy, name=&quot;loss&quot;)</span><br><span class="line">    </span><br><span class="line">with tf.name_scope(&quot;eval&quot;):</span><br><span class="line">    correct = tf.nn.in_top_k(logits, y, 1)</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct, tf.float32), name=&quot;accuracy&quot;)</span><br></pre></td></tr></table></figure></li></ul><p>设置训练器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">with tf.name_scope(&quot;train&quot;):</span><br><span class="line">    optimizer = tf.train.GradientDescentOptimizer(learning_rate)</span><br><span class="line">    train_vars = tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope=&quot;hidden[34]|outputs&quot;)</span><br><span class="line">    </span><br><span class="line">    training_op = optimizer.minimize(loss, var_list=train_vars)</span><br></pre></td></tr></table></figure></p><p>设置Saver<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reuse_vars = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=&quot;hidden[123]&quot;)</span><br><span class="line">restore_saver = tf.train.Saver(reuse_vars)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">saver = tf.train.Saver()</span><br></pre></td></tr></table></figure></p><p>执行阶段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">with tf.Session() as sess:</span><br><span class="line">    init.run()</span><br><span class="line">    restore_saver.restore(sess, &quot;./model/my_model_final.ckpt&quot;)</span><br><span class="line">    </span><br><span class="line">    for epoch in range(n_epochs):</span><br><span class="line">        for X_batch, y_batch in shuffle_batch(X_train, y_train, batch_size):</span><br><span class="line">            sess.run(training_op, feed_dict=&#123;X:X_batch, y:y_batch&#125;)</span><br><span class="line">            accuracy_val = accuracy.eval(feed_dict=&#123;X:X_valid, y:y_valid&#125;)</span><br><span class="line">        print(epoch, &quot;Validation Accuracy:&quot;, accuracy_val)</span><br><span class="line">    </span><br><span class="line">    save_path = saver.save(sess, &quot;./my_new_model_final.ckpt&quot;)</span><br></pre></td></tr></table></figure></p><ul><li>法2<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">with tf.name_scope(&quot;dnn&quot;):</span><br><span class="line">    hidden1 = tf.layers.dense(X, n_hidden1, activation=tf.nn.relu, name=&quot;hidden1&quot;)</span><br><span class="line">    hidden2 = tf.layers.dense(hidden1, n_hidden2, activation=tf.nn.relu, name=&quot;hidden2&quot;)</span><br><span class="line">    hidden2_stop = tf.stop_gradient(hidden2)#设置不更新权重</span><br><span class="line">    hidden3 = tf.layers.dense(hidden2_stop, n_hidden3, activation=tf.nn.relu, name=&quot;hidden3&quot;)</span><br><span class="line">    hidden4 = tf.layers.dense(hidden3, n_hidden4, activation=tf.nn.relu, name=&quot;hidden4&quot;)</span><br><span class="line">    logits = tf.layers.dense(hidden4, n_outputs, name=&quot;outputs&quot;)</span><br></pre></td></tr></table></figure></li></ul><p>其他正常设置</p><ul><li>缓存冻结层<br>因为冻结层不发生变化，所以可以将训练实例的最高冻结层输出缓存起来，由于之前训练会轮询数据集很多次，缓存冻结层将整个数据集先通过冻结层输出后，构建新的输出，可以获得巨大速度提升。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># caching the Frozen Layers</span><br><span class="line"></span><br><span class="line">reset_graph()</span><br><span class="line"></span><br><span class="line">n_inputs = 28 * 28</span><br><span class="line">n_hidden1 = 300</span><br><span class="line">n_hidden2 = 50</span><br><span class="line">n_hidden3 = 50</span><br><span class="line">n_hidden4 = 20</span><br><span class="line">n_outputs = 10</span><br><span class="line"></span><br><span class="line">X = tf.placeholder(tf.float32, shape=(None, n_inputs), name=&quot;X&quot;)</span><br><span class="line">y = tf.placeholder(tf.int32, shape=(None), name=&quot;y&quot;)</span><br><span class="line"></span><br><span class="line">with tf.name_scope(&quot;dnn&quot;):</span><br><span class="line">    hidden1 = tf.layers.dense(X, n_hidden1, activation=tf.nn.relu, name=&quot;hidden1&quot;)</span><br><span class="line">    hidden2 = tf.layers.dense(hidden1, n_hidden2, activation=tf.nn.relu, name=&quot;hidden2&quot;)</span><br><span class="line">    hidden2_stop = tf.stop_gradient(hidden2) #冻结层</span><br><span class="line">    hidden3 = tf.layers.dense(hidden2_stop, n_hidden3, activation=tf.nn.relu, name=&quot;hidden3&quot;)</span><br><span class="line">    hidden4 = tf.layers.dense(hidden3, n_hidden4, activation=tf.nn.relu, name=&quot;hidden4&quot;)</span><br><span class="line">    logits = tf.layers.dense(hidden4, n_outputs, name=&quot;outputs&quot;)</span><br><span class="line">    </span><br><span class="line">with tf.name_scope(&quot;loss&quot;):</span><br><span class="line">    xentropy = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=y, logits=logits)</span><br><span class="line">    loss = tf.reduce_mean(xentropy)</span><br><span class="line">    </span><br><span class="line">with tf.name_scope(&quot;eval&quot;):</span><br><span class="line">    correct = tf.nn.in_top_k(logits, y, 1)</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct, tf.float32), name=&quot;accuracy&quot;)</span><br><span class="line"></span><br><span class="line">with tf.name_scope(&quot;train&quot;):</span><br><span class="line">    optimizer = tf.train.GradientDescentOptimizer(learning_rate)</span><br><span class="line">    training_op = optimizer.minimize(loss)</span><br><span class="line"></span><br><span class="line">#重用部分层</span><br><span class="line">reuse_vars = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=&quot;hidden[123]&quot;)</span><br><span class="line">restore_saver = tf.train.Saver(reuse_vars)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">saver = tf.train.Saver()</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">n_batches = len(X_train) // batch_size</span><br><span class="line"></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    init.run()</span><br><span class="line">    </span><br><span class="line">    restore_saver.restore(sess, &quot;./model/my_model_final.ckpt&quot;)</span><br><span class="line">    </span><br><span class="line">    #在低层跑完整个训练集</span><br><span class="line">    h2_cache = sess.run(hidden2, feed_dict=&#123;X:X_train&#125;)</span><br><span class="line">    h2_cache_valid = sess.run(hidden2, feed_dict=&#123;X:X_valid&#125;)</span><br><span class="line">    </span><br><span class="line">    #构建hidden2的输出，并进行训练</span><br><span class="line">    for epoch in range(n_epochs):</span><br><span class="line">        shuffled_idx = np.random.permutation(len(X_train))</span><br><span class="line">        hidden2_batches = np.array_split(h2_cache[shuffled_idx], n_batches)</span><br><span class="line">        y_batches = np.array_split(y_train[shuffled_idx], n_batches)</span><br><span class="line">        for hidden2_batch, y_batch in zip(hidden2_batches, y_batches):</span><br><span class="line">            sess.run(training_op, feed_dict=&#123;hidden2:hidden2_batch, y:y_batch&#125;)</span><br><span class="line">        accuracy_val = accuracy.eval(feed_dict=&#123;hidden2: h2_cache_valid, y: y_valid&#125;)</span><br><span class="line">        </span><br><span class="line">        print(epoch, &quot;Validation accuracy:&quot;, accuracy_val)</span><br><span class="line">        </span><br><span class="line">    save_path = saver.save(sess, &quot;./my_new_model_final.ckpt&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;梯度消失-爆炸问题解决方案-使用预训练模型&quot;&gt;&lt;a href=&quot;#梯度消失-爆炸问题解决方案-使用预训练模型&quot; class=&quot;headerlink&quot; title=&quot;梯度消失/爆炸问题解决方案/使用预训练模型&quot;&gt;&lt;/a&gt;梯度消失/爆炸问题解决方案/使用预训练模型&lt;/</summary>
      
    
    
    
    <category term="深度学习" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/深度学习/"/>
    
    
    <category term="Tensorflow" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/Tensorflow/"/>
    
    <category term="梯度消失，预训练" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/梯度消失，预训练/"/>
    
  </entry>
  
  <entry>
    <title>sklearn实现支持向量机</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/06/C9585905-3174-49F4-91CB-49EEAFBA8BEC/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/06/C9585905-3174-49F4-91CB-49EEAFBA8BEC/</id>
    <published>2019-11-06T15:05:47.000Z</published>
    <updated>2019-11-06T15:05:47.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h1><ol><li>线性SVM分类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.preprocessing import StandardScaler</span><br><span class="line">from sklearn.svm import LinearSVC</span><br><span class="line">svm_clf = Pipeline((</span><br><span class="line">(“scaler”, StandardScaler()),</span><br><span class="line">(“linear_svc”, LinearSVC(C=1, loss=“hinge”))</span><br><span class="line">))</span><br><span class="line">svm_clf.fit(X, y)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>非线性SVM分类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.preprocessing import PolynomialFeatures</span><br><span class="line">Polynomial_svm_clf = Pipeline((</span><br><span class="line">(“poly_fetures”, PolynomialFeatures(degree=3)),</span><br><span class="line">((“scaler”,    ),</span><br><span class="line">((“svm_clf”,  LinearSVC(C=10, loss=“hinge”))</span><br><span class="line">))</span><br></pre></td></tr></table></figure></li><li><p>多项式核</p></li></ol><ul><li>核技巧<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.svm import SVC</span><br><span class="line">Poly_kernel_svm_clf = Pipeline((</span><br><span class="line">(“scaler”,    ),</span><br><span class="line">(“svm_clf”, SVC(kernel=“poly”, degree=3, coef0=1, C=5))</span><br><span class="line">))</span><br></pre></td></tr></table></figure></li></ul><p>上面使用了3阶多项式核的SVM分类器。<br>如果模型过度拟合，应降低多项式阶数，反之提升阶数。<br>超参数coef0控制模型首高阶还是低阶多项式影响的程度。</p><hr><p>寻找正确超参数值的常用方法是网格搜索。</p><hr><ul><li>添加相似特征<br>高斯径向积函数RBF，通过创建地标，构建新特征，使不可分问题线性可分。（公式P204）</li><li>选择地标的方法： 在数据集每个实例位置创建一个地标，变成一个m✖️m的训练集</li><li>高斯RBF核函数：产生的结果和添加很多相似特征一样，实际上没添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Rbf_kernel_svm_clf = Pipeline((</span><br><span class="line">(“scaler”, StandardScaler()),</span><br><span class="line">(“svm_clf”, SVC(kernel=”rbf”, gamma=5, C=0.001))</span><br><span class="line">))</span><br><span class="line">``` </span><br><span class="line">gamma值会使钟形曲线变窄，每个实例影响范围缩小：决策边界不规则，围绕单个实例旋转。</span><br><span class="line">减少gamma会使曲线变得更宽，每个实例影响范围更大，决策边界更平坦。</span><br><span class="line">（类似超参数C）</span><br><span class="line"></span><br><span class="line">&gt; 永远先从线性核函数开始尝试，LinearSVC比SVC（kernel=“linear”）快得多。  </span><br><span class="line">&gt; 使用交叉验证，网格搜索来尝试其他核函数。  </span><br><span class="line"></span><br><span class="line">* 计算复杂度的比较（p207）</span><br><span class="line">SVC支持核技巧，其他都不支持，但是时间复杂度很高。</span><br><span class="line">3. SVM回归</span><br></pre></td></tr></table></figure></li></ul><p>From sklearn.svm import LinearSVR</p><p>Svm_reg = LinearSVR(epsilon=1.5)#epsilon “街道”的宽度<br>Svm_reg.fit(X, y)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">使用SVR类（支持核技巧）</span><br></pre></td></tr></table></figure></p><p>From sklearn.svm import SVR<br>Svm_poly_reg = SVR(kernel=“poly”, C=100, eplison=0.1)<br>Svm_poly_reg.fit()<br><code>`</code></p><blockquote><p>超参数C是松弛变量的系数，用于权衡特征权重W和松弛变量的关系，增大C，会增强对松弛变量的优化，从而使允许违例程度减少，决策边界不规则  </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;支持向量机&quot;&gt;&lt;a href=&quot;#支持向量机&quot; class=&quot;headerlink&quot; title=&quot;支持向量机&quot;&gt;&lt;/a&gt;支持向量机&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;线性SVM分类&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="机器学习" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/机器学习/"/>
    
    
    <category term="sklearn" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/sklearn/"/>
    
    <category term="svm" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/svm/"/>
    
  </entry>
  
  <entry>
    <title>sklearn实现决策树</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/06/221B146F-F963-4421-A711-CA2215884E08/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/06/221B146F-F963-4421-A711-CA2215884E08/</id>
    <published>2019-11-06T15:05:02.000Z</published>
    <updated>2019-11-06T15:05:02.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><ol><li>训练与可视化 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.tree import DecsionTreeClassifier</span><br><span class="line"></span><br><span class="line">Tree_clf = DecisionTreeClassifer(max_depth=2)</span><br><span class="line">Tree_clf.fit()</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.tree import export_graphviz</span><br><span class="line"></span><br><span class="line">Export_graphviz(</span><br><span class="line">tree_clf,</span><br><span class="line">out_file=‘iris_tree.dot’,</span><br><span class="line">feature_names=iris.feature_names[2:],</span><br><span class="line">class_names=iris.target_names,</span><br><span class="line">rounded=True,</span><br><span class="line">filled=True</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>使用graphviz包中的dot命令行工具进行转化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dot -Tpng iris_tree.dot -o iris_tree.png</span><br></pre></td></tr></table></figure></p><ol start="2"><li>作出预测<blockquote><p>Scikit-learn使用的是CART算法，只生成二叉树，非叶节点只有两个子节点。<br>其他算法如ID3可拥有两个以上子节点。  </p></blockquote></li><li><p>估算类别概率<br>该节点中类别k的训练实例占比</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tree_clf.predict_proba([[5, 1.5]])</span><br></pre></td></tr></table></figure></li><li><p>CART算法 分类与回归树<br>使用单个特征k和阈值t_k将训练集分成两个子集。<br>最小化成本函数，两侧不纯度的加权之和。（公式p230）<br>是一种贪婪算法，最后的解相当不错，但不保证最优。</p></li><li><p>计算复杂度<br>预测复杂度 logm/log2<br>训练复杂度n✖️mlogm<br>可以设置presot=True对数据预处理加快训练</p></li><li>选择基尼不纯度还是信息熵<br>默认使用基尼不纯度，超参数criterion设置为entropy选择信息熵。<br>大多情况区别不大，集你不纯度倾向分裂最常见类别，信息熵趋向于产生平衡的树。</li><li>正则化超参数<br>避免过拟合，降低自由度。<br>限制深度，max_depth<br>分裂前节点必须有的最小样本数：min_samples_split<br>叶节点必须有的最小样本数：min_samples_leaf<br>加权实例总数的占比：min_weigjt_fraction_leaf<br>最大叶节点数：max_leaf_nodes<br>分裂每个节点评估的最大特征数量max_feature</li><li>回归<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.tree import DecisionTreeRegressor</span><br><span class="line">Tree_reg = DecisionTreeRegressor(max_depth)</span><br><span class="line">Tree_reg.fit()</span><br></pre></td></tr></table></figure></li></ol><p>分裂训练集的方式为最小化MSE<br>成本函数，左右两侧mse加权之和（p237）</p><ol start="9"><li>不稳定性<br>青睐正交垂直边界，可能导致泛化不佳，可用PCA来限制这一问题。<br>随即森林可限制这一不稳定性。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;决策树&quot;&gt;&lt;a href=&quot;#决策树&quot; class=&quot;headerlink&quot; title=&quot;决策树&quot;&gt;&lt;/a&gt;决策树&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;训练与可视化 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="机器学习" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/机器学习/"/>
    
    
    <category term="sklearn" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/sklearn/"/>
    
    <category term="决策树" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/决策树/"/>
    
  </entry>
  
  <entry>
    <title>sklearn实现降维</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/06/B5B2671B-F4D2-4A63-A861-775CE5E0CA85/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/06/B5B2671B-F4D2-4A63-A861-775CE5E0CA85/</id>
    <published>2019-11-06T15:03:44.000Z</published>
    <updated>2019-11-06T15:03:44.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h1><blockquote><p>能够加速训练，但会轻微降低系统性能，使流水线更加复杂，维护难度上升。<br>高维空间数据集很大可能是非常稀疏的。 训练集维度越高，过拟合风险就越大。</p><ol><li>数据降维的主要方法</li></ol><ul><li>投影</li></ul></blockquote><ul><li>流形学习<br>对训练实例进行流形建模。<br>2D流形就是一个能够在更高维空间里弯曲和扭转的2D形状。<br>d维流形就是n（d&lt;n）维空间的一部分，局部类似于一个d维超平面。<blockquote><p>在训练模型前降低训练集的维度，肯定可以加快训练速度，但这并不总会导致更好或更简单的解决方案，它取决于数据集。  </p></blockquote></li></ul><ol start="2"><li>PCA<br>识别出最接近数据的超平面，然后将数据投影其上。</li></ol><ul><li><p>保留差异性<br>识别哪条轴对差异性贡献最高，与第一条轴垂直的轴对剩余差异性贡献最高。<br>奇异值分解（svd）可用于寻找主成分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X_centered = X - X.mean(axis=0)</span><br><span class="line">U, s, V = np.linalg.svd(X_centered)</span><br><span class="line">C1 = V.T[:,0]</span><br><span class="line">C2 = V.T[:,1]</span><br></pre></td></tr></table></figure></li><li><p>低维度投影<br>X_d-prom =X点乘W_d</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">W2 = V.T[:,:2]</span><br><span class="line">X2D = X_centered.dot(W2)</span><br></pre></td></tr></table></figure></li><li><p>使用Scikit-Learn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#pca类借助SVD分解实现主成分分析</span><br><span class="line">From sklearn.decoposition import PCA</span><br><span class="line">PCA = PCA(n_components = 2)</span><br><span class="line">X2D = PCA.fit_transform(X)</span><br></pre></td></tr></table></figure></li><li><p>方差解释率<br>表示每个主成分轴对整个数据集的方差的贡献度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Print(PCA.explained_variance_ratio_)</span><br></pre></td></tr></table></figure></li><li><p>选择正确数量的维数<br>法1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pca = PCA()</span><br><span class="line">Pca.fit(X)</span><br><span class="line">Cumsum = np.cumsum(pca.explained_variance_ratio_)</span><br><span class="line">d = np.argmax(cumsum &gt;= 0.95) + 1</span><br></pre></td></tr></table></figure></li></ul><p>法2：直接设置保留的方差比<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pca = PCA(n_components=0.95)</span><br><span class="line">X_reduced = pca.fit_transform(X)</span><br></pre></td></tr></table></figure></p><p>法3：绘制cumsum，找到曲线拐点</p><ul><li>PCA压缩<br>原始数据和重建数据（压缩之后解压缩）之间的均方距离，被称为<strong>重建误差</strong>。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pca = PCA(n_components = 154)</span><br><span class="line">X_mnist_reduced = pca.fit_transform(X_mnist)</span><br><span class="line">X_mnist_recovered = pca.inverse_transform(X_mnist_reduced)</span><br></pre></td></tr></table></figure></li></ul><p>X_recovered = X_d-project 点乘 W_d.T</p><ul><li>增量PCA<br>将训练集分成一个个小批量，一次给IPCA算法喂一个。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.decomposition import incrementalPCA</span><br><span class="line">N_batches = 100</span><br><span class="line">Inc_pca = IncrementalPCA(n_component=154)</span><br><span class="line">For x_batch in np.array_split(X_mnist, n_batches):</span><br><span class="line">inc_pca.partial_fit(X_batch)</span><br><span class="line">X_mnist_reduced = inc_pca.transform(X_mnist)</span><br></pre></td></tr></table></figure></li></ul><p>使用numpy的memmap类，仅在需要时加载内存中需要的数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">X_mm = np.memmap(filename, dtype=“float32”, mode=“readonly”, shape=(m,n))</span><br><span class="line"></span><br><span class="line">Batch_size = m // n_batches</span><br><span class="line">Inc_pca = IncrementalPCA(n_components=154, </span><br><span class="line">batch_size=batch_size)</span><br><span class="line">Inc_pca.fit(X_mm)</span><br></pre></td></tr></table></figure></p><ul><li><p>随机PCA<br>快速找到主成分的近似值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Rnd_pca = PCA(n_components=154, svd_solver=“randomized”)</span><br><span class="line">X_reduced =rnd_pca.fit_transform(X_mnist)</span><br></pre></td></tr></table></figure></li><li><p>核主成分分析<br>核技巧，隐形地将实例映射到高维特征空间，使支持向量机能进行非线性分类和回归。</p></li></ul><p>可应用于PCA<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.decomposition import KernelPCA</span><br><span class="line"></span><br><span class="line">Rbf_pca = KernelPCA(n_components=2, kernel=“rbf”, gamma=0.04)</span><br><span class="line">X_reduced = rbf_pca.fit_transform(X)</span><br></pre></td></tr></table></figure></p><p>选择核函数核调整超参数</p><blockquote><p>由于kPCA是一种无监督学习方法，没有明显的性能指标来帮助选择最佳核函数核超参数值。 而降维通常是监督学习的准备步骤，所以可以使用网格搜索，来找到使任务性能最佳的核和超参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.model_selection import GridSearchCV</span><br><span class="line">from sklearn.linear_model import LogisticRegression</span><br><span class="line">from sklearn.pipeline import Pipeline</span><br><span class="line"></span><br><span class="line">clf = Pipeline([</span><br><span class="line">        (&quot;kpca&quot;, KernelPCA(n_components=2)),</span><br><span class="line">        (&quot;log_reg&quot;, LogisticRegression(solver=&quot;liblinear&quot;))</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">param_grid = [&#123;</span><br><span class="line">        &quot;kpca__gamma&quot;: np.linspace(0.03, 0.05, 10),</span><br><span class="line">        &quot;kpca__kernel&quot;: [&quot;rbf&quot;, &quot;sigmoid&quot;]</span><br><span class="line">    &#125;]</span><br><span class="line"></span><br><span class="line">grid_search = GridSearchCV(clf, param_grid, cv=3)</span><br><span class="line">grid_search.fit(X, y)</span><br><span class="line"></span><br><span class="line">Print(grid_search.best_params_)</span><br></pre></td></tr></table></figure></p></blockquote><p>法2：选择重建误差最低的核和超参数，但是因为映射维度问题实现不容易。<br>可在原始空间找一点，使其映射于重建点，这被称为重建原像。<br>通过设置fit_inverse_transform=True实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rbf_pca = KernelPCA(n_component=2, kernel=“rbf”, gamma=0.0443,</span><br><span class="line">fit_inverse_transform=True)</span><br><span class="line">X_reduced = rbf_pca.fit_transform(X)</span><br><span class="line">X_preimage = rbf_pca.inverse_transform(X_reduced)</span><br></pre></td></tr></table></figure></p><p>计算重建原像误差。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.metrics import mean_squared_error</span><br><span class="line"></span><br><span class="line">mean_squared_error(X, X_preimage)</span><br></pre></td></tr></table></figure></p><ol start="3"><li>局部线性嵌入（LLE） 另一种非线性降维（NLDR）技术<br>一种流形学习技术。<br>LLE首先测量每个算法如何与其最近的邻居线性相关，然后寻找一个能最大程度保留这些局部关系的低维表示。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.manifold import LocallyLinearEmbedding</span><br><span class="line"></span><br><span class="line">Lyle = locallyLinearEmbedding(n_components=2, n_neighbors=10)</span><br><span class="line">X_reduced = ole.fit_transform(X)</span><br></pre></td></tr></table></figure></li></ol><p>公式（P293）</p><ol start="4"><li>其他降维技巧<br>MDS、 Isomap、 t-SNE、 LDA<br><img src="%E9%99%8D%E7%BB%B4/IMG_0016.PNG" alt></li></ol><p><img src="%E9%99%8D%E7%BB%B4/IMG_0017.PNG" alt></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;降维&quot;&gt;&lt;a href=&quot;#降维&quot; class=&quot;headerlink&quot; title=&quot;降维&quot;&gt;&lt;/a&gt;降维&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;能够加速训练，但会轻微降低系统性能，使流水线更加复杂，维护难度上升。&lt;br&gt;高维空间数据集很大可能是非常稀疏的。 </summary>
      
    
    
    
    <category term="机器学习" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/机器学习/"/>
    
    
    <category term="sklearn" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/sklearn/"/>
    
    <category term="降维" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/降维/"/>
    
  </entry>
  
  <entry>
    <title>sklearn集成学习和随机森林</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/06/203B2692-33BD-423D-A525-C3406A10F6B5/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/06/203B2692-33BD-423D-A525-C3406A10F6B5/</id>
    <published>2019-11-06T15:02:40.000Z</published>
    <updated>2019-11-06T15:02:40.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集成学习和随机森林"><a href="#集成学习和随机森林" class="headerlink" title="集成学习和随机森林"></a>集成学习和随机森林</h1><ol><li>投票分类器<blockquote><p>当预测器尽可能相互独立时，集成方法的效果最优。<br>获得更多种分类器的方法之一就是使用不同的算法进行训练。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.ensemble import RandomForestClassifier</span><br><span class="line">From sklearn.ensemble import RandomForestClassifier</span><br><span class="line">From sklearn.linear_model import LogisticRegression</span><br><span class="line">From sklearn.svm import SVC</span><br><span class="line"></span><br><span class="line">Log_clf=</span><br><span class="line">Rnd_clf=</span><br><span class="line">Svm_clf=</span><br><span class="line">Voting_clf=VotingClassifier(</span><br><span class="line">estimators=[(‘lr’, log_clf),(‘rf’,rnf_clf),(‘svc’,svm_clf)],</span><br><span class="line">voting=‘hard</span><br><span class="line">)</span><br><span class="line">Voting_clf.fit(X_train, y_train)</span><br></pre></td></tr></table></figure></blockquote></li></ol><p>软投票法：当所有分类器都可以估算类别的概率（有predict_proba方法），可以将概率在所有当个分类器上平均，给出平均概率最高的类别作为预测，这被称为软投票法。通常比硬投票法更优。通过设置超参数voting=‘soft’完成。</p><blockquote><p>默认情况下SVC类没有predict_proba，需要设置超参数probabil=True。  </p></blockquote><ol start="2"><li>bagging 和 pasting<br>每个预测集使用的算法相同，但在不同的训练集随机子集上进行训练。<br>bagging采样时将样本放回，pasting采样时样本不放回（bootstrap=False）</li></ol><p>与直接在原始训练集上训练单个预测器相比，集成的偏差相近，但方差更低。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.ensemble import BaggingClassifier</span><br><span class="line">From sklearn.tree import DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line">Bag_clf = BaggingClassifier(</span><br><span class="line">DecisionTreeClassifier(), n_estimators=500,</span><br><span class="line">max_samples=100, bootstrap=True, n_jobs=-1</span><br><span class="line">)</span><br><span class="line">Bag_clf.fit()</span><br><span class="line">Y_pred = Bag_clf.predict(X_test)</span><br></pre></td></tr></table></figure></p><p>如果基础分类器能估算类别概率，具备predict_proba()，那么BaggingClassifier自动执行的就是软投票法而不是硬投票法。</p><p>自助法给每个训练子集引入了更高的多样性，所以bagging比pasting偏差略高，但预测器之间的关联度更低，集成方差降低。bagging生成的模型通常更好。</p><ul><li>包外评估<br>使用bagging时有些实例可能根本不会被采样。<br>用这些实例进行评估，将每个预测器在其包外实例上的评估结果进行平均，就可以得到集成的评估。<br>通过设置oob_score=True来实现训练结束后自动包外评估。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Bag_clf = BaggingClassifier(</span><br><span class="line">DecisionTreeClassifier(), n_estimators=500,</span><br><span class="line">botstrap=True, n_jobs=-1, oob_score=True</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><p>在测试集评估模型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.metrics import accuracy_score</span><br><span class="line">Y_pred= bag_clf.predict(X_test)</span><br><span class="line">accuracy_score(y_test, y_pred)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#获得每个训练实例的包外决策函数，本例中基础决策器有predict_proba()所以返回每个实例的类别概率</span><br><span class="line">Bag_clf.oob_decision_funtion_</span><br></pre></td></tr></table></figure><ol start="3"><li>Random Patches 和随机子空间<br>BaggingClassifier也支持对特征进行抽样，通过超参数max_features和bootstrap_features控制，工作方式与实例抽样相同，只是对象时特征。</li></ol><p>对于处理高位输入特别有用（如图像）。<br>对训练实例和特征都进行抽样称为<strong>Random Patches</strong>方法。<br>保留所有训练实例（bootstrap=False且max_samples=1.0）但是对特征进行抽样(bootstrap_features=True且/或max_features&lt;1.0)，被称为<strong>随机子空间</strong>法。</p><p>对特征抽样给预测器带来更大多样性，得到更高偏差和更低方差。</p><ol start="4"><li>随机森林<br>是决策树的集成，通常用bagging训练，训练集大小通过max_samples设置。<br>两种实现方法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.ensemble import RandomForestClassifer</span><br><span class="line"></span><br><span class="line">Rnd_clf = RandomForestCLassifier(n_estimators=500, max_leaf_nodes=16, n_jobs=-1)</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Bag_clf = BaggingClassifier(</span><br><span class="line">DecisionTreeClassifier(splitter=“random”, max_leaf_nodes=16),</span><br><span class="line">n_estimators=500, </span><br><span class="line">max_samples=1.0, </span><br><span class="line">bootstrap=True, </span><br><span class="line">n_jobs=-1</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><p>极端随机树<br>节点分裂时，每个特征使用随机阈值，而不是搜索得出的最佳阈值。<br>这种极端随机的决策树组成的森林被称为极端随机树。<br>高偏差换取低方差。<br>通过ExtraTreesClasifier创建，API与RandomForestClassifier相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.ensemble import ExtraTreesClassifier</span><br><span class="line">Ext_clf = ExtraTreesClassifier(n_estimators=500, max_leaf_nodes=16, n_jobs=-1)</span><br></pre></td></tr></table></figure></li><li><p>特征重要性<br>重要特征更可能出现在根节点位置。<br>通过计算一个特征早森林中所有树上的平均深度可以估算一个特征的重要程度。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">For name,score in zip(iris[“feature_names”),rnd_clf.feature_importances_):</span><br><span class="line">print(name, score)</span><br></pre></td></tr></table></figure><ol start="5"><li>提升法（Boosting）<br>指将几个弱学习器结合成一个强学习器的任意集成方法。</li></ol><ul><li>AdaBoost<br>新预测器对其前序进行纠正的办法之一，更多关注前序拟合不足的实例。<br>无法并行，每个预测器要在前一个预测器训练评估后才能开始训练。<br>每个实例赋予初始权重，预测器依据加权误差率计算预测器权重，更新实例的权重，归一化所有实例权重，然后训练新的预测器。</li></ul><p>预测时计算预测器的预测结果，并通过权重加权，得到大多数加权投票的类别为预测类别。</p><blockquote><p>Sick it-learn使用的是Adaboost的一个多分类版本，叫SAMME（基于多类指数损失函数的逐步添加模型），只有两个类别时，SAMME等同于AdaBoost。<br>此外，预测器可以估算类别概率时，sklearn会使用SAMME的变体，称为SAMME.R，依赖的是类别概率而不是类别预测，通常表现更好。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.ensemble import AdaBoostClassifier</span><br><span class="line"></span><br><span class="line">Ada_clf = AdaBoostClassifer(</span><br><span class="line">DecisionTreeClassifier(max_depth=1, n_estimators=200,</span><br><span class="line">algorithm=“SAMME.R”, learning_rate=0.5</span><br><span class="line">)</span><br><span class="line">#学习率影响误分类实例的重视程度</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>梯度提升Gradient Boosting<br>让新的预测器针对前一个预测器的残差进行拟合，各预测器预测结果相加得出最后预测结果。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.ensemble import GradientBoostingRegressor</span><br><span class="line"></span><br><span class="line">Gbrt = GradientBoostingRegressor(max_depth=2, n_estimators=3, learning_rate=1.0)</span><br><span class="line">#learning_rate对咩个数的贡献进行缩放。</span><br><span class="line">#如果设为低值，如0.1，则需要更多树来拟合训练集，但时预测繁华效果通常更好。</span><br></pre></td></tr></table></figure><p>找到最佳的树的数量可使用<strong>早期停止法</strong>。</p><blockquote><p>简单的实现方法使用<strong>staged_predict()</strong>方法：在训练每个阶段都对集成的预测返回一个迭代器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Gbrt = GradientBoostingRegressor(max_depth=2, n_estimator=120)</span><br><span class="line">Gbrt.fit(X_train, y_train)</span><br><span class="line">Errors = [mean_squared_error(y_val, y_pred)</span><br><span class="line">for y_pred in gbrt.staged_predict(X_val)]</span><br><span class="line">Bst_n_estimators = np.argmin(errors)</span><br><span class="line">Gbrt_best = GradientBoostingRegressor(max_depth=2, n_estimators=bst_n_estimator)</span><br><span class="line">Gbrt_best.fit(X_train, y_train)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>设置<strong>warm_start=True</strong>,当fit()被调用时，Scikit-learn会保留现在树，从而允许增量训练。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">gbrt = GradientBoostingRegressor(max_depth=2, warm_start=True)</span><br><span class="line"></span><br><span class="line">min_val_error = float(&quot;inf&quot;)</span><br><span class="line">error_going_up = 0 </span><br><span class="line">for n_estimators in range(1,120):</span><br><span class="line">    gbrt.n_estimators =n_estimators</span><br><span class="line">    gbrt.fit(X_train, y_train)</span><br><span class="line">    y_pred = gbrt.predict(X_val)</span><br><span class="line">    val_error = mean_squared_error(y_val, y_pred)</span><br><span class="line">    if val_error &lt; min_val_error:</span><br><span class="line">        min_val_error = val_error</span><br><span class="line">        error_going_up = 0</span><br><span class="line">    else:</span><br><span class="line">        error_going_up += 1</span><br><span class="line">#连续5次未改善时停止训练</span><br><span class="line">        if error_going_up == 5:</span><br><span class="line">            print(n_estimators-5)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure></p></blockquote><ol start="6"><li>堆叠法（stacking）<br>训练一个模型来执行对所有预测器的聚合<br>混合器将预测器的输出作为输入训练集，进行最终预测。<br>Scikit-learn不直接支持堆叠。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier</span><br><span class="line">from sklearn.svm import LinearSVC</span><br><span class="line">from sklearn.neural_network import MLPClassifier</span><br><span class="line"></span><br><span class="line">random_forest_clf = RandomForestClassifier(n_estimators=10, random_state=42)</span><br><span class="line">extra_trees_clf = ExtraTreesClassifier(n_estimators=10, random_state=42)</span><br><span class="line">svm_clf = LinearSVC(random_state=42)</span><br><span class="line">mlp_clf = MLPClassifier(random_state=42)</span><br><span class="line"></span><br><span class="line">#第一层预测器训练</span><br><span class="line">estimators = [random_forest_clf, extra_trees_clf, svm_clf, mlp_clf]</span><br><span class="line">for estimator in estimators:</span><br><span class="line">    print(&quot;Training the&quot;, estimator)</span><br><span class="line">    estimator.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">#第一层预测器形成训练集</span><br><span class="line">X_val_predictions = np.empty((len(X_val), len(estimators)), dtype=np.float32)</span><br><span class="line"></span><br><span class="line">for index, estimator in enumerate(estimators):</span><br><span class="line">    X_val_predictions[:, index] = estimator.predict(X_val)</span><br><span class="line"></span><br><span class="line">#训练混合器</span><br><span class="line">rnd_forest_blender = RandomForestClassifier(n_estimators=200, oob_score=True, random_state=42)</span><br><span class="line">rnd_forest_blender.fit(X_val_predictions, y_val)</span><br><span class="line"></span><br><span class="line">#生成测试集</span><br><span class="line">X_test_predictions = np.empty((len(X_test), len(estimators)), dtype=np.float32)</span><br><span class="line"></span><br><span class="line">for index, estimator in enumerate(estimators):</span><br><span class="line">    X_test_predictions[:, index] = estimator.predict(X_test)</span><br><span class="line"></span><br><span class="line">#预测</span><br><span class="line">y_pred = rnd_forest_blender.predict(X_test_predictions)</span><br><span class="line"></span><br><span class="line">#评估</span><br><span class="line">from sklearn.metrics import accuracy_score</span><br><span class="line">accuracy_score(y_test, y_pred)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;集成学习和随机森林&quot;&gt;&lt;a href=&quot;#集成学习和随机森林&quot; class=&quot;headerlink&quot; title=&quot;集成学习和随机森林&quot;&gt;&lt;/a&gt;集成学习和随机森林&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;投票分类器&lt;blockquote&gt;
&lt;p&gt;当预测器尽可能相互独立时，集成</summary>
      
    
    
    
    <category term="机器学习" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/机器学习/"/>
    
    
    <category term="sklearn" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/sklearn/"/>
    
    <category term="集成学习，随机森林" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/集成学习，随机森林/"/>
    
  </entry>
  
  <entry>
    <title>ANN简介基于TensorFlow</title>
    <link href="http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/06/A8E255A0-8354-4CBC-A3C9-37F780898882/"/>
    <id>http://mengxiao2000.github.io/mengxiao2000.github.io/2019/11/06/A8E255A0-8354-4CBC-A3C9-37F780898882/</id>
    <published>2019-11-06T15:01:41.000Z</published>
    <updated>2019-11-06T15:01:41.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ANN简介基于TensorFlow"><a href="#ANN简介基于TensorFlow" class="headerlink" title="ANN简介基于TensorFlow"></a>ANN简介基于TensorFlow</h1><h2 id="感知器"><a href="#感知器" class="headerlink" title="感知器"></a>感知器</h2><p>基于被称为基于线性阈值单元（LTU）的人工神经元：输入输出都是数字，每个输入连接对应一个权重，LTU加权求和所有输入，然后对求值结果应用于哥阶跃函数并产生最后的输出。</p><ul><li>Heavisider阶跃函数</li><li>Hebbian学习：当两个神经元有相同输出时，他们间的连接权重就会被增强。</li><li><p>Scikit-learn的Perceptron类实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">From sklearn.linear_model import Perception</span><br><span class="line">Per_clf = Perception(random_state=42)</span><br></pre></td></tr></table></figure></li><li><p>多层感知器（MLP）和反向传播<br>对每个训练实例，反向传播算法先正向进行一次预测，度量误差，然后反向遍历每个层次来度量每个连接的误差贡献度，最后微调每个连接的权重来降低误差（梯度下降）。</p></li><li>激活函数：双曲正切函数和RELU函数<h2 id="TensorFlow训练MLP"><a href="#TensorFlow训练MLP" class="headerlink" title="TensorFlow训练MLP"></a>TensorFlow训练MLP</h2><h3 id="最简单方式：使用TF-Learn"><a href="#最简单方式：使用TF-Learn" class="headerlink" title="最简单方式：使用TF.Learn"></a>最简单方式：使用TF.Learn</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Feature_columns = tf.contrib.learn.infer_real_valued_columns_from(X_train)</span><br><span class="line">Dnn_clf = tf.contrib.learn.DNNClassifier(hidden_units=[300,100], n_classes=10, features_columns=feature_columns)</span><br><span class="line">#activation_fn调整激活函数</span><br><span class="line">Dnn_clf.fit(X=X_train, y=y_train, batch_size=50, steps=40000)</span><br></pre></td></tr></table></figure></li></ul><p>DNNClassifier背后默认基于relu激活函数创建所有神经元层次，输出层softmax，成本函数是交叉熵。</p><h3 id="纯TensorFlow训练DNN"><a href="#纯TensorFlow训练DNN" class="headerlink" title="纯TensorFlow训练DNN"></a>纯TensorFlow训练DNN</h3><p>构建阶段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">Import tensorflow as tf</span><br><span class="line"></span><br><span class="line">#模型参数设置</span><br><span class="line">N_inputs = </span><br><span class="line">N_hidden1 =</span><br><span class="line">N_hidden2 =</span><br><span class="line">N_outputs =</span><br><span class="line"></span><br><span class="line">#占位符节点表示输入与目标</span><br><span class="line">X = tf.placeholder(tf.float32, shape=(None, n_inputs), name=“X”)</span><br><span class="line">y = tf.placeholder(tf.int32, shape=(None), name=“y”)</span><br><span class="line"></span><br><span class="line">#神经网络层</span><br><span class="line">Def neuron_layer（X， n_neurons, name, activation=None）:</span><br><span class="line">with tf.name_scope(“name”):</span><br><span class="line">n_inputs = int(X.get_shape()[1])</span><br><span class="line"></span><br><span class="line">studdev = 2/np.sqrt(n_inputs)</span><br><span class="line">init = tf.truncated_normal((n_inputs, n_neurons), studded=stddev)</span><br><span class="line">#tf.truncated_normal(shape，mean=0.0，stddev=1.0, dtype,seed=None, name=None)用于从截断的正态分布中输出随机值</span><br><span class="line">#shape输出张量的形状</span><br><span class="line">#mean是正态分布均值</span><br><span class="line">#sddev是正太分布的标准差</span><br><span class="line">#dtpye指输出的类型</span><br><span class="line">#产生的数据-均值&lt;=2*标准差</span><br><span class="line">#使用一个指定的标准偏差会让算法熟练的更快</span><br><span class="line"></span><br><span class="line">W = tf.Variable(init, name=“Weights”)</span><br><span class="line">b = tf.Variavle(tf.zeros([n_neurons]),name=“bias” )</span><br><span class="line">z = tf.matmul(X,W)+b</span><br><span class="line">if activation == “relu”:</span><br><span class="line">return tf.nn.relu(z)</span><br><span class="line">else:</span><br><span class="line">return z</span><br><span class="line"></span><br><span class="line">#创建神经网络</span><br><span class="line">with tf.name_scope(“dnn”):</span><br><span class="line">hidden1 = neuron_layer(X, n_hidden1, “hidden1”, activation=“relu”)</span><br><span class="line">hidden2 = neuron_layer(X, n_hidden2, “hidden2”, activation=“relu”)</span><br><span class="line">logits = neuron_layer(hidden2,  n_outputs, “outputs”)</span><br><span class="line"></span><br><span class="line">#使用full_conntected创建全连接层</span><br><span class="line">From tensorflow.contrib.layers import fully_connected</span><br><span class="line"></span><br><span class="line">With tf.name_scope(“dnn”):</span><br><span class="line">hidden1 = fully_connected(X, n_hidden1, scope=“hidden1”)</span><br><span class="line">hidden2 = fully_connected(hidden1, n_hidden2, scope=“hidden2”)</span><br><span class="line">logits = fully_connected(hidden2, n_outputs, scope=“outputs”, activation_fn=None)</span><br><span class="line"></span><br><span class="line">#损失函数</span><br><span class="line">with tf.name_scope(“loss”):</span><br><span class="line">x_centropy = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=y, logits=logits)</span><br><span class="line">#根据logits计算交叉熵，计算出每个实例的交叉熵的一维张量</span><br><span class="line">loss = tf.reduce_mean(xentropy, name=“loss”)</span><br><span class="line">#计算所有实例的平均交叉熵</span><br><span class="line"></span><br><span class="line">Learning_rate = 0.01</span><br><span class="line">#梯度下降优化器</span><br><span class="line">with tf.name_scope(“train”):</span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate)</span><br><span class="line">training_op = optimizer.minimizer(loss)</span><br><span class="line"></span><br><span class="line">#对模型求值</span><br><span class="line">with tf.name_scope(“eval”):</span><br><span class="line">correct = tf.nn.in_top_k(logits, y, 1)</span><br><span class="line">#判断target/y是否在前top k/1的预测logits之中，输出batch_size大小的预测数组</span><br><span class="line">#此处即看y是否等于logits的最大数的索引值</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct, tf.float32))</span><br><span class="line">#tf.cast（x，dtype）将输入x转换为目标类型，返回一个张量，此处把bool型转化为float32来进行求平均计算</span><br><span class="line">#tf.reduce_mean()计算张量沿指定轴的平均值，axis=None则求全局</span><br><span class="line">#axis=n求平均，可以看作把张量第n维变为1 ？</span><br><span class="line">#保存</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">Saver = tf.train.Saver()</span><br></pre></td></tr></table></figure></p><p>执行阶段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">From tensorflow.examples.tutorials.mnist import input_data</span><br><span class="line">Mnist = input_data.read_data_sets(“/temp/data”)</span><br><span class="line"></span><br><span class="line">N_epochs = 400</span><br><span class="line">Batch_size = 50</span><br><span class="line"></span><br><span class="line">With tf.Session() as sess:</span><br><span class="line">init.run()</span><br><span class="line">for epoch in range(n_epochs):</span><br><span class="line">for iteration in range(mnist.train.num_examples// batch_size):</span><br><span class="line">X_batch, y_batch = mnist.train.next_batch(batch_size)</span><br><span class="line">sess.run(training_op, feed_dict=&#123;X:X_batch, y:y_batch&#125;)</span><br><span class="line">acc_train = accuracy.eval(feed_dict=&#123;X:X_batch, y:y_batch&#125;)</span><br><span class="line">acc_test = accuracy.eval(feed_dict=&#123;X:mnist.test.images, y:mnist.test.labels&#125;)</span><br><span class="line">print(“”)</span><br><span class="line">save_path = saver.save(sess, “./model_final.ckpt”)</span><br></pre></td></tr></table></figure></p><p>使用神经网络<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">With tf.Session() as sess:</span><br><span class="line">saver.restore(sess, “./model_final.ckpt”)</span><br><span class="line">X_new_scaled = [...]</span><br><span class="line">Z = logits.eval(feed_dict=&#123;X: X_new_scaled&#125;)</span><br><span class="line">y_pred = np.argmax(Z, axis=1)</span><br></pre></td></tr></table></figure></p><h2 id="微调超参数"><a href="#微调超参数" class="headerlink" title="微调超参数"></a>微调超参数</h2><ul><li>随机搜素法</li><li>隐藏层的个数调整<br>深层网络比浅层网络有更高的参数效率，可以用更少的神经元建模复杂函数，加快训练，提高对新数据集的泛化能力。</li><li>每层神经元数<br>增加每层的神经元数量会比增加层数产生更多消耗。</li><li>更多的层次和神经元，提前结束训练，被称为“弹力裤”方法。</li><li>激活函数<br>大多情况可以在隐藏层中用ReLU<br>对于输出层：softmax对于互斥的分类任务是个不错的选择，回归任务可以不用激活函数</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ANN简介基于TensorFlow&quot;&gt;&lt;a href=&quot;#ANN简介基于TensorFlow&quot; class=&quot;headerlink&quot; title=&quot;ANN简介基于TensorFlow&quot;&gt;&lt;/a&gt;ANN简介基于TensorFlow&lt;/h1&gt;&lt;h2 id=&quot;感知器&quot;&gt;</summary>
      
    
    
    
    <category term="深度学习" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/categories/深度学习/"/>
    
    
    <category term="Tensorflow" scheme="http://mengxiao2000.github.io/mengxiao2000.github.io/tags/Tensorflow/"/>
    
  </entry>
  
</feed>
